name: Deploy

on:
  workflow_call:
    inputs:
      env:
        description: "which environment to deploy to"
        required: true
        type: string
      ecr_repository:
        description: "ecr repo to hold container image"
        required: true
        type: string
      ecr_region:
        description: "ecr region to hold container image"
        required: true
        type: string
      debug:
        description: "flag for django's debug mode"
        required: true
        type: number
      django_allowed_hosts:
        description: "django allowed hosts"
        required: true
        type: string
      catalogue_url:
        description: "url for backend datahub catalogue"
        required: true
        type: string
    secrets:
      kube_namespace:
        description: "the kubernetes namespace to deploy to"
        required: true
      kube_cert:
        description: "cert used to verify identity to cluster"
        required: true
      kube_cluster:
        description: "address of the cluster to connect to"
        required: true
      kube_token:
        description: "used to authenticate to the cluster"
        required: true
      ecr_role_to_assume:
        description: "role to authenticate ecr image repository push"
        required: true
      secret_key:
        description: "secret key"
        required: true
      catalogue_token:
        description: "token to authenticate with the catalogue"
        required: true

jobs:
  deploy:
    name: Deploy Helm Chart into Cloud Platform
    environment: ${{ inputs.env }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ inputs.ECR_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
      - run: |
          cat deployments/templates/deployment.yml | envsubst > deployments/deployment.yml
          cat deployments/templates/ingress.yml | envsubst > deployments/ingress.yml
          cat deployments/templates/service.yml | envsubst > deployments/service.yml
          cat deployments/templates/secrets.yml | envsubst > deployments/secrets.yml
        env:
          CATALOGUE_URL: ${{ inputs.CATALOGUE_URL }}
          DEBUG: ${{ inputs.DEBUG }}
          DJANGO_ALLOWED_HOSTS: ${{ inputs.DJANGO_ALLOWED_HOSTS }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          CATALOGUE_TOKEN: ${{ secrets.CATALOGUE_TOKEN }}
          IMAGE_TAG: ${{ github.sha }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ inputs.ECR_REPOSITORY }}
          NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
      - run: |
          echo "${{ secrets.KUBE_CERT }}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${{ secrets.KUBE_TOKEN }}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config use-context ${KUBE_CLUSTER}
          kubectl -n ${KUBE_NAMESPACE} apply -f deployments/
        env:
          KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
