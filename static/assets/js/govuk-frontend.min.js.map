{"version":3,"file":"govuk-frontend.min.js","sources":["../../src/govuk/common/govuk-frontend-version.mjs","../../src/govuk/common/normalise-string.mjs","../../src/govuk/common/index.mjs","../../src/govuk/common/normalise-dataset.mjs","../../src/govuk/errors/index.mjs","../../src/govuk/govuk-frontend-component.mjs","../../src/govuk/i18n.mjs","../../src/govuk/components/accordion/accordion.mjs","../../src/govuk/components/button/button.mjs","../../src/govuk/common/closest-attribute-value.mjs","../../src/govuk/components/character-count/character-count.mjs","../../src/govuk/components/checkboxes/checkboxes.mjs","../../src/govuk/components/error-summary/error-summary.mjs","../../src/govuk/components/exit-this-page/exit-this-page.mjs","../../src/govuk/components/header/header.mjs","../../src/govuk/components/notification-banner/notification-banner.mjs","../../src/govuk/components/password-input/password-input.mjs","../../src/govuk/components/radios/radios.mjs","../../src/govuk/components/skip-link/skip-link.mjs","../../src/govuk/components/tabs/tabs.mjs","../../src/govuk/all.mjs"],"sourcesContent":["/*\n * This variable is automatically overwritten during builds and releases.\n * It doesn't need to be updated manually.\n */\n\n/**\n * GOV.UK Frontend release version\n *\n * {@link https://github.com/alphagov/govuk-frontend/releases}\n */\nexport const version = 'development'\n","/**\n * Normalise string\n *\n * 'If it looks like a duck, and it quacks like a duckâ€¦' ðŸ¦†\n *\n * If the passed value looks like a boolean or a number, convert it to a boolean\n * or number.\n *\n * Designed to be used to convert config passed via data attributes (which are\n * always strings) into something sensible.\n *\n * @internal\n * @param {DOMStringMap[string]} value - The value to normalise\n * @param {SchemaProperty} [property] - Component schema property\n * @returns {string | boolean | number | undefined} Normalised data\n */\nexport function normaliseString(value, property) {\n  const trimmedValue = value ? value.trim() : ''\n\n  let output\n  let outputType = property?.type\n\n  // No schema type set? Determine automatically\n  if (!outputType) {\n    if (['true', 'false'].includes(trimmedValue)) {\n      outputType = 'boolean'\n    }\n\n    // Empty / whitespace-only strings are considered finite so we need to check\n    // the length of the trimmed string as well\n    if (trimmedValue.length > 0 && isFinite(Number(trimmedValue))) {\n      outputType = 'number'\n    }\n  }\n\n  switch (outputType) {\n    case 'boolean':\n      output = trimmedValue === 'true'\n      break\n\n    case 'number':\n      output = Number(trimmedValue)\n      break\n\n    default:\n      output = value\n  }\n\n  return output\n}\n\n/**\n * @typedef {import('./index.mjs').SchemaProperty} SchemaProperty\n */\n","import { normaliseString } from './normalise-string.mjs'\n\n/**\n * Common helpers which do not require polyfill.\n *\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\n * so that the polyfill can be properly tree-shaken and does not burden\n * the components that do not need that helper\n */\n\n/**\n * Config merging function\n *\n * Takes any number of objects and combines them together, with\n * greatest priority on the LAST item passed in.\n *\n * @internal\n * @param {...{ [key: string]: unknown }} configObjects - Config objects to merge\n * @returns {{ [key: string]: unknown }} A merged config object\n */\nexport function mergeConfigs(...configObjects) {\n  // Start with an empty object as our base\n  /** @type {{ [key: string]: unknown }} */\n  const formattedConfigObject = {}\n\n  // Loop through each of the passed objects\n  for (const configObject of configObjects) {\n    for (const key of Object.keys(configObject)) {\n      const option = formattedConfigObject[key]\n      const override = configObject[key]\n\n      // Push their keys one-by-one into formattedConfigObject. Any duplicate\n      // keys with object values will be merged, otherwise the new value will\n      // override the existing value.\n      if (isObject(option) && isObject(override)) {\n        // @ts-expect-error Index signature for type 'string' is missing\n        formattedConfigObject[key] = mergeConfigs(option, override)\n      } else {\n        // Apply override\n        formattedConfigObject[key] = override\n      }\n    }\n  }\n\n  return formattedConfigObject\n}\n\n/**\n * Extracts keys starting with a particular namespace from dataset ('data-*')\n * object, removing the namespace in the process, normalising all values\n *\n * @internal\n * @param {{ schema: Schema }} Component - Component class\n * @param {DOMStringMap} dataset - The object to extract key-value pairs from\n * @param {string} namespace - The namespace to filter keys with\n * @returns {ObjectNested | undefined} Nested object with dot-separated key namespace removed\n */\nexport function extractConfigByNamespace(Component, dataset, namespace) {\n  const property = Component.schema.properties[namespace]\n\n  // Only extract configs for object schema properties\n  if (property?.type !== 'object') {\n    return\n  }\n\n  // Add default empty config\n  const newObject = {\n    [namespace]: /** @type {ObjectNested} */ ({})\n  }\n\n  for (const [key, value] of Object.entries(dataset)) {\n    /** @type {ObjectNested | ObjectNested[NestedKey]} */\n    let current = newObject\n\n    // Split the key into parts, using . as our namespace separator\n    const keyParts = key.split('.')\n\n    /**\n     * Create new level per part\n     *\n     * e.g. 'i18n.textareaDescription.other' becomes\n     * `{ i18n: { textareaDescription: { other } } }`\n     */\n    for (const [index, name] of keyParts.entries()) {\n      if (typeof current === 'object') {\n        // Drop down to nested object until the last part\n        if (index < keyParts.length - 1) {\n          // New nested object (optionally) replaces existing value\n          if (!isObject(current[name])) {\n            current[name] = {}\n          }\n\n          // Drop down into new or existing nested object\n          current = current[name]\n        } else if (key !== namespace) {\n          // Normalised value (optionally) replaces existing value\n          current[name] = normaliseString(value)\n        }\n      }\n    }\n  }\n\n  return newObject[namespace]\n}\n\n/**\n * Get hash fragment from URL\n *\n * Extract the hash fragment (everything after the hash) from a URL,\n * but not including the hash symbol\n *\n * @private\n * @param {string} url - URL\n * @returns {string | undefined} Fragment from URL, without the hash\n */\nexport function getFragmentFromUrl(url) {\n  if (!url.includes('#')) {\n    return undefined\n  }\n\n  return url.split('#').pop()\n}\n\n/**\n * Get GOV.UK Frontend breakpoint value from CSS custom property\n *\n * @private\n * @param {string} name - Breakpoint name\n * @returns {{ property: string, value?: string }} Breakpoint object\n */\nexport function getBreakpoint(name) {\n  const property = `--govuk-frontend-breakpoint-${name}`\n\n  // Get value from `<html>` with breakpoints on CSS :root\n  const value = window\n    .getComputedStyle(document.documentElement)\n    .getPropertyValue(property)\n\n  return {\n    property,\n    value: value || undefined\n  }\n}\n\n/**\n * Move focus to element\n *\n * Sets tabindex to -1 to make the element programmatically focusable,\n * but removes it on blur as the element doesn't need to be focused again.\n *\n * @private\n * @template {HTMLElement} FocusElement\n * @param {FocusElement} $element - HTML element\n * @param {object} [options] - Handler options\n * @param {function(this: FocusElement): void} [options.onBeforeFocus] - Callback before focus\n * @param {function(this: FocusElement): void} [options.onBlur] - Callback on blur\n */\nexport function setFocus($element, options = {}) {\n  const isFocusable = $element.getAttribute('tabindex')\n\n  if (!isFocusable) {\n    $element.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Handle element focus\n   */\n  function onFocus() {\n    $element.addEventListener('blur', onBlur, { once: true })\n  }\n\n  /**\n   * Handle element blur\n   */\n  function onBlur() {\n    options.onBlur?.call($element)\n\n    if (!isFocusable) {\n      $element.removeAttribute('tabindex')\n    }\n  }\n\n  // Add listener to reset element on blur, after focus\n  $element.addEventListener('focus', onFocus, { once: true })\n\n  // Focus element\n  options.onBeforeFocus?.call($element)\n  $element.focus()\n}\n\n/**\n * Checks if GOV.UK Frontend is supported on this page\n *\n * Some browsers will load and run our JavaScript but GOV.UK Frontend\n * won't be supported.\n *\n * @internal\n * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n * @returns {boolean} Whether GOV.UK Frontend is supported on this page\n */\nexport function isSupported($scope = document.body) {\n  if (!$scope) {\n    return false\n  }\n\n  return $scope.classList.contains('govuk-frontend-supported')\n}\n\n/**\n * Validate component config by schema\n *\n * Follows limited examples in JSON schema for wider support in future\n *\n * {@link https://ajv.js.org/json-schema.html#compound-keywords}\n * {@link https://ajv.js.org/packages/ajv-errors.html#single-message}\n *\n * @internal\n * @param {Schema} schema - Config schema\n * @param {{ [key: string]: unknown }} config - Component config\n * @returns {string[]} List of validation errors\n */\nexport function validateConfig(schema, config) {\n  const validationErrors = []\n\n  // Check errors for each schema\n  for (const [name, conditions] of Object.entries(schema)) {\n    const errors = []\n\n    // Check errors for each schema condition\n    if (Array.isArray(conditions)) {\n      for (const { required, errorMessage } of conditions) {\n        if (!required.every((key) => !!config[key])) {\n          errors.push(errorMessage) // Missing config key value\n        }\n      }\n\n      // Check one condition passes or add errors\n      if (name === 'anyOf' && !(conditions.length - errors.length >= 1)) {\n        validationErrors.push(...errors)\n      }\n    }\n  }\n\n  return validationErrors\n}\n\n/**\n * Check for an array\n *\n * @internal\n * @param {unknown} option - Option to check\n * @returns {boolean} Whether the option is an array\n */\nfunction isArray(option) {\n  return Array.isArray(option)\n}\n\n/**\n * Check for an object\n *\n * @internal\n * @param {unknown} option - Option to check\n * @returns {boolean} Whether the option is an object\n */\nfunction isObject(option) {\n  return !!option && typeof option === 'object' && !isArray(option)\n}\n\n/**\n * Schema for component config\n *\n * @typedef {object} Schema\n * @property {{ [field: string]: SchemaProperty | undefined }} properties - Schema properties\n * @property {SchemaCondition[]} [anyOf] - List of schema conditions\n */\n\n/**\n * Schema property for component config\n *\n * @typedef {object} SchemaProperty\n * @property {'string' | 'boolean' | 'number' | 'object'} type - Property type\n */\n\n/**\n * Schema condition for component config\n *\n * @typedef {object} SchemaCondition\n * @property {string[]} required - List of required config fields\n * @property {string} errorMessage - Error message when required config fields not provided\n */\n\n/**\n * @internal\n * @typedef {keyof ObjectNested} NestedKey\n * @typedef {{ [key: string]: string | boolean | number | ObjectNested | undefined }} ObjectNested\n */\n","import { extractConfigByNamespace } from './index.mjs'\nimport { normaliseString } from './normalise-string.mjs'\n\n/**\n * Normalise dataset\n *\n * Loop over an object and normalise each value using {@link normaliseString},\n * optionally expanding nested `i18n.field`\n *\n * @internal\n * @param {{ schema: Schema }} Component - Component class\n * @param {DOMStringMap} dataset - HTML element dataset\n * @returns {ObjectNested} Normalised dataset\n */\nexport function normaliseDataset(Component, dataset) {\n  const out = /** @type {ReturnType<typeof normaliseDataset>} */ ({})\n\n  // Normalise top-level dataset ('data-*') values using schema types\n  for (const [field, property] of Object.entries(Component.schema.properties)) {\n    if (field in dataset) {\n      out[field] = normaliseString(dataset[field], property)\n    }\n\n    /**\n     * Extract and normalise nested object values automatically using\n     * {@link normaliseString} but only schema object types are allowed\n     */\n    if (property?.type === 'object') {\n      out[field] = extractConfigByNamespace(Component, dataset, field)\n    }\n  }\n\n  return out\n}\n\n/**\n * @internal\n * @typedef {import('./index.mjs').ObjectNested} ObjectNested\n * @typedef {import('./index.mjs').Schema} Schema\n */\n","/**\n * GOV.UK Frontend error\n *\n * A base class for `Error`s thrown by GOV.UK Frontend.\n *\n * It is meant to be extended into specific types of errors\n * to be thrown by our code.\n *\n * @example\n * ```js\n * class MissingRootError extends GOVUKFrontendError {\n *   // Setting an explicit name is important as extending the class will not\n *   // set a new `name` on the subclass. The `name` property is important\n *   // to ensure intelligible error names even if the class name gets\n *   // mangled by a minifier\n *   name = \"MissingRootError\"\n * }\n * ```\n * @abstract\n */\nexport class GOVUKFrontendError extends Error {\n  name = 'GOVUKFrontendError'\n}\n\n/**\n * Indicates that GOV.UK Frontend is not supported\n */\nexport class SupportError extends GOVUKFrontendError {\n  name = 'SupportError'\n\n  /**\n   * Checks if GOV.UK Frontend is supported on this page\n   *\n   * @param {HTMLElement | null} [$scope] - HTML element `<body>` checked for browser support\n   */\n  constructor($scope = document.body) {\n    const supportMessage =\n      'noModule' in HTMLScriptElement.prototype\n        ? 'GOV.UK Frontend initialised without `<body class=\"govuk-frontend-supported\">` from template `<script>` snippet'\n        : 'GOV.UK Frontend is not supported in this browser'\n\n    super(\n      $scope\n        ? supportMessage\n        : 'GOV.UK Frontend initialised without `<script type=\"module\">`'\n    )\n  }\n}\n\n/**\n * Indicates that a component has received an illegal configuration\n */\nexport class ConfigError extends GOVUKFrontendError {\n  name = 'ConfigError'\n}\n\n/**\n * Indicates an issue with an element (possibly `null` or `undefined`)\n */\nexport class ElementError extends GOVUKFrontendError {\n  name = 'ElementError'\n\n  /**\n   * @internal\n   * @overload\n   * @param {string} message - Element error message\n   */\n\n  /**\n   * @internal\n   * @overload\n   * @param {ElementErrorOptions} options - Element error options\n   */\n\n  /**\n   * @internal\n   * @param {string | ElementErrorOptions} messageOrOptions - Element error message or options\n   */\n  constructor(messageOrOptions) {\n    let message = typeof messageOrOptions === 'string' ? messageOrOptions : ''\n\n    // Build message from options\n    if (typeof messageOrOptions === 'object') {\n      const { componentName, identifier, element, expectedType } =\n        messageOrOptions\n\n      // Add prefix and identifier\n      message = `${componentName}: ${identifier}`\n\n      // Append reason\n      message += element\n        ? ` is not of type ${expectedType ?? 'HTMLElement'}`\n        : ' not found'\n    }\n\n    super(message)\n  }\n}\n\n/**\n * Element error options\n *\n * @internal\n * @typedef {object} ElementErrorOptions\n * @property {string} componentName - The name of the component throwing the error\n * @property {string} identifier - An identifier that'll let the user understand which element has an error. This is whatever makes the most sense\n * @property {Element | null} [element] - The element in error\n * @property {string} [expectedType] - The type that was expected for the identifier\n */\n","import { isSupported } from './common/index.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Base Component class\n *\n * Centralises the behaviours shared by our components\n *\n * @internal\n * @abstract\n */\nexport class GOVUKFrontendComponent {\n  /**\n   * Constructs a new component, validating that GOV.UK Frontend is supported\n   *\n   * @internal\n   */\n  constructor() {\n    this.checkSupport()\n  }\n\n  /**\n   * Validates whether GOV.UK Frontend is supported\n   *\n   * @private\n   * @throws {SupportError} when GOV.UK Frontend is not supported\n   */\n  checkSupport() {\n    if (!isSupported()) {\n      throw new SupportError()\n    }\n  }\n}\n","/**\n * Internal support for selecting messages to render, with placeholder\n * interpolation and locale-aware number formatting and pluralisation\n *\n * @internal\n */\nexport class I18n {\n  translations\n  locale\n\n  /**\n   * @internal\n   * @param {{ [key: string]: string | TranslationPluralForms }} translations - Key-value pairs of the translation strings to use.\n   * @param {object} [config] - Configuration options for the function.\n   * @param {string | null} [config.locale] - An overriding locale for the PluralRules functionality.\n   */\n  constructor(translations = {}, config = {}) {\n    // Make list of translations available throughout function\n    this.translations = translations\n\n    // The locale to use for PluralRules and NumberFormat\n    this.locale = config.locale ?? (document.documentElement.lang || 'en')\n  }\n\n  /**\n   * The most used function - takes the key for a given piece of UI text and\n   * returns the appropriate string.\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {{ [key: string]: unknown }} [options] - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The appropriate translation string.\n   * @throws {Error} Lookup key required\n   * @throws {Error} Options required for `${}` placeholders\n   */\n  t(lookupKey, options) {\n    if (!lookupKey) {\n      // Print a console error if no lookup key has been provided\n      throw new Error('i18n: lookup key missing')\n    }\n\n    // Fetch the translation for that lookup key\n    let translation = this.translations[lookupKey]\n\n    // If the `count` option is set, determine which plural suffix is needed and\n    // change the lookupKey to match. We check to see if it's numeric instead of\n    // falsy, as this could legitimately be 0.\n    if (typeof options?.count === 'number' && typeof translation === 'object') {\n      const translationPluralForm =\n        translation[this.getPluralSuffix(lookupKey, options.count)]\n\n      // Update translation with plural suffix\n      if (translationPluralForm) {\n        translation = translationPluralForm\n      }\n    }\n\n    if (typeof translation === 'string') {\n      // Check for ${} placeholders in the translation string\n      if (translation.match(/%{(.\\S+)}/)) {\n        if (!options) {\n          throw new Error(\n            'i18n: cannot replace placeholders in string if no option data provided'\n          )\n        }\n\n        return this.replacePlaceholders(translation, options)\n      }\n\n      return translation\n    }\n\n    // If the key wasn't found in our translations object,\n    // return the lookup key itself as the fallback\n    return lookupKey\n  }\n\n  /**\n   * Takes a translation string with placeholders, and replaces the placeholders\n   * with the provided data\n   *\n   * @internal\n   * @param {string} translationString - The translation string\n   * @param {{ [key: string]: unknown }} options - Any options passed with the translation string, e.g: for string interpolation.\n   * @returns {string} The translation string to output, with $\\{\\} placeholders replaced\n   */\n  replacePlaceholders(translationString, options) {\n    const formatter = Intl.NumberFormat.supportedLocalesOf(this.locale).length\n      ? new Intl.NumberFormat(this.locale)\n      : undefined\n\n    return translationString.replace(\n      /%{(.\\S+)}/g,\n\n      /**\n       * Replace translation string placeholders\n       *\n       * @internal\n       * @param {string} placeholderWithBraces - Placeholder with braces\n       * @param {string} placeholderKey - Placeholder key\n       * @returns {string} Placeholder value\n       */\n      function (placeholderWithBraces, placeholderKey) {\n        if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\n          const placeholderValue = options[placeholderKey]\n\n          // If a user has passed `false` as the value for the placeholder\n          // treat it as though the value should not be displayed\n          if (\n            placeholderValue === false ||\n            (typeof placeholderValue !== 'number' &&\n              typeof placeholderValue !== 'string')\n          ) {\n            return ''\n          }\n\n          // If the placeholder's value is a number, localise the number formatting\n          if (typeof placeholderValue === 'number') {\n            return formatter\n              ? formatter.format(placeholderValue)\n              : `${placeholderValue}`\n          }\n\n          return placeholderValue\n        }\n\n        throw new Error(\n          `i18n: no data found to replace ${placeholderWithBraces} placeholder in string`\n        )\n      }\n    )\n  }\n\n  /**\n   * Check to see if the browser supports Intl.PluralRules\n   *\n   * It requires all conditions to be met in order to be supported:\n   * - The implementation of Intl supports PluralRules (NOT true in Safari 10â€“12)\n   * - The browser/OS has plural rules for the current locale (browser dependent)\n   *\n   * {@link https://browsersl.ist/#q=supports+es6-module+and+not+supports+intl-pluralrules}\n   *\n   * @internal\n   * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\n   */\n  hasIntlPluralRulesSupport() {\n    return Boolean(\n      'PluralRules' in window.Intl &&\n        Intl.PluralRules.supportedLocalesOf(this.locale).length\n    )\n  }\n\n  /**\n   * Get the appropriate suffix for the plural form.\n   *\n   * Uses Intl.PluralRules (or our own fallback implementation) to get the\n   * 'preferred' form to use for the given count.\n   *\n   * Checks that a translation has been provided for that plural form â€“ if it\n   * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\n   * either, in which case an error will be thrown)\n   *\n   * @internal\n   * @param {string} lookupKey - The lookup key of the string to use.\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\n   * @throws {Error} Plural form `.other` required when preferred plural form is missing\n   */\n  getPluralSuffix(lookupKey, count) {\n    // Validate that the number is actually a number.\n    //\n    // Number(count) will turn anything that can't be converted to a Number type\n    // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\n    count = Number(count)\n    if (!isFinite(count)) {\n      return 'other'\n    }\n\n    // Fetch the translation for that lookup key\n    const translation = this.translations[lookupKey]\n\n    // Check to verify that all the requirements for Intl.PluralRules are met.\n    // If so, we can use that instead of our custom implementation. Otherwise,\n    // use the hardcoded fallback.\n    const preferredForm = this.hasIntlPluralRulesSupport()\n      ? new Intl.PluralRules(this.locale).select(count)\n      : this.selectPluralFormUsingFallbackRules(count)\n\n    // Use the correct plural form if provided\n    if (typeof translation === 'object') {\n      if (preferredForm in translation) {\n        return preferredForm\n        // Fall back to `other` if the plural form is missing, but log a warning\n        // to the console\n      } else if ('other' in translation) {\n        console.warn(\n          `i18n: Missing plural form \".${preferredForm}\" for \"${this.locale}\" locale. Falling back to \".other\".`\n        )\n\n        return 'other'\n      }\n    }\n\n    // If the required `other` plural form is missing, all we can do is error\n    throw new Error(\n      `i18n: Plural form \".other\" is required for \"${this.locale}\" locale`\n    )\n  }\n\n  /**\n   * Get the plural form using our fallback implementation\n   *\n   * This is split out into a separate function to make it easier to test the\n   * fallback behaviour in an environment where Intl.PluralRules exists.\n   *\n   * @internal\n   * @param {number} count - Number used to determine which pluralisation to use.\n   * @returns {PluralRule} The pluralisation form for count in this locale.\n   */\n  selectPluralFormUsingFallbackRules(count) {\n    // Currently our custom code can only handle positive integers, so let's\n    // make sure our number is one of those.\n    count = Math.abs(Math.floor(count))\n\n    const ruleset = this.getPluralRulesForLocale()\n\n    if (ruleset) {\n      return I18n.pluralRules[ruleset](count)\n    }\n\n    return 'other'\n  }\n\n  /**\n   * Work out which pluralisation rules to use for the current locale\n   *\n   * The locale may include a regional indicator (such as en-GB), but we don't\n   * usually care about this part, as pluralisation rules are usually the same\n   * regardless of region. There are exceptions, however, (e.g. Portuguese) so\n   * this searches by both the full and shortened locale codes, just to be sure.\n   *\n   * @internal\n   * @returns {string | undefined} The name of the pluralisation rule to use (a key for one\n   *   of the functions in this.pluralRules)\n   */\n  getPluralRulesForLocale() {\n    const localeShort = this.locale.split('-')[0]\n\n    // Look through the plural rules map to find which `pluralRule` is\n    // appropriate for our current `locale`.\n    for (const pluralRule in I18n.pluralRulesMap) {\n      const languages = I18n.pluralRulesMap[pluralRule]\n      if (languages.includes(this.locale) || languages.includes(localeShort)) {\n        return pluralRule\n      }\n    }\n  }\n\n  /**\n   * Map of plural rules to languages where those rules apply.\n   *\n   * Note: These groups are named for the most dominant or recognisable language\n   * that uses each system. The groupings do not imply that the languages are\n   * related to one another. Many languages have evolved the same systems\n   * independently of one another.\n   *\n   * Code to support more languages can be found in the i18n spike:\n   * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\n   *\n   * Languages currently supported:\n   *\n   * Arabic: Arabic (ar)\n   * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\n   *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\n   * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\n   *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\n   * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\n   *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\n   *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\n   *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\n   *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\n   *   Urdu (ur)\n   * Irish: Irish Gaelic (ga)\n   * Russian: Russian (ru), Ukrainian (uk)\n   * Scottish: Scottish Gaelic (gd)\n   * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\n   * Welsh: Welsh (cy)\n   *\n   * @internal\n   * @type {{ [key: string]: string[] }}\n   */\n  static pluralRulesMap = {\n    arabic: ['ar'],\n    chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\n    french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\n    german: [\n      'af',\n      'sq',\n      'az',\n      'eu',\n      'bg',\n      'ca',\n      'da',\n      'nl',\n      'en',\n      'et',\n      'fi',\n      'ka',\n      'de',\n      'el',\n      'hu',\n      'lb',\n      'no',\n      'so',\n      'sw',\n      'sv',\n      'ta',\n      'te',\n      'tr',\n      'ur'\n    ],\n    irish: ['ga'],\n    russian: ['ru', 'uk'],\n    scottish: ['gd'],\n    spanish: ['pt-PT', 'it', 'es'],\n    welsh: ['cy']\n  }\n\n  /**\n   * Different pluralisation rule sets\n   *\n   * Returns the appropriate suffix for the plural form associated with `n`.\n   * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\n   * meaning of each differs per locale). 'other' should always exist, even in\n   * languages without plurals, such as Chinese.\n   * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\n   *\n   * The count must be a positive integer. Negative numbers and decimals aren't accounted for\n   *\n   * @internal\n   * @type {{ [key: string]: (count: number) => PluralRule }}\n   */\n  static pluralRules = {\n    arabic(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n % 100 >= 3 && n % 100 <= 10) {\n        return 'few'\n      }\n      if (n % 100 >= 11 && n % 100 <= 99) {\n        return 'many'\n      }\n      return 'other'\n    },\n    chinese() {\n      return 'other'\n    },\n    french(n) {\n      return n === 0 || n === 1 ? 'one' : 'other'\n    },\n    german(n) {\n      return n === 1 ? 'one' : 'other'\n    },\n    irish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n >= 3 && n <= 6) {\n        return 'few'\n      }\n      if (n >= 7 && n <= 10) {\n        return 'many'\n      }\n      return 'other'\n    },\n    russian(n) {\n      const lastTwo = n % 100\n      const last = lastTwo % 10\n      if (last === 1 && lastTwo !== 11) {\n        return 'one'\n      }\n      if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) {\n        return 'few'\n      }\n      if (\n        last === 0 ||\n        (last >= 5 && last <= 9) ||\n        (lastTwo >= 11 && lastTwo <= 14)\n      ) {\n        return 'many'\n      }\n      // Note: The 'other' suffix is only used by decimal numbers in Russian.\n      // We don't anticipate it being used, but it's here for consistency.\n      return 'other'\n    },\n    scottish(n) {\n      if (n === 1 || n === 11) {\n        return 'one'\n      }\n      if (n === 2 || n === 12) {\n        return 'two'\n      }\n      if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) {\n        return 'few'\n      }\n      return 'other'\n    },\n    spanish(n) {\n      if (n === 1) {\n        return 'one'\n      }\n      if (n % 1000000 === 0 && n !== 0) {\n        return 'many'\n      }\n      return 'other'\n    },\n    welsh(n) {\n      if (n === 0) {\n        return 'zero'\n      }\n      if (n === 1) {\n        return 'one'\n      }\n      if (n === 2) {\n        return 'two'\n      }\n      if (n === 3) {\n        return 'few'\n      }\n      if (n === 6) {\n        return 'many'\n      }\n      return 'other'\n    }\n  }\n}\n\n/**\n * Plural rule category mnemonic tags\n *\n * @internal\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\n */\n\n/**\n * Translated message by plural rule they correspond to.\n *\n * Allows to group pluralised messages under a single key when passing\n * translations to a component's constructor\n *\n * @internal\n * @typedef {object} TranslationPluralForms\n * @property {string} [other] - General plural form\n * @property {string} [zero] - Plural form used with 0\n * @property {string} [one] - Plural form used with 1\n * @property {string} [two] - Plural form used with 2\n * @property {string} [few] - Plural form used for a few\n * @property {string} [many] - Plural form used for many\n */\n","import { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Accordion component\n *\n * This allows a collection of sections to be collapsed by default, showing only\n * their headers. Sections can be expanded or collapsed individually by clicking\n * their headers. A \"Show all sections\" button is also added to the top of the\n * accordion, which switches to \"Hide all sections\" when all the sections are\n * expanded.\n *\n * The state of each section is saved to the DOM via the `aria-expanded`\n * attribute, which also provides accessibility.\n *\n * @preserve\n */\nexport class Accordion extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {AccordionConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  controlsClass = 'govuk-accordion__controls'\n\n  /** @private */\n  showAllClass = 'govuk-accordion__show-all'\n\n  /** @private */\n  showAllTextClass = 'govuk-accordion__show-all-text'\n\n  /** @private */\n  sectionClass = 'govuk-accordion__section'\n\n  /** @private */\n  sectionExpandedClass = 'govuk-accordion__section--expanded'\n\n  /** @private */\n  sectionButtonClass = 'govuk-accordion__section-button'\n\n  /** @private */\n  sectionHeaderClass = 'govuk-accordion__section-header'\n\n  /** @private */\n  sectionHeadingClass = 'govuk-accordion__section-heading'\n\n  /** @private */\n  sectionHeadingDividerClass = 'govuk-accordion__section-heading-divider'\n\n  /** @private */\n  sectionHeadingTextClass = 'govuk-accordion__section-heading-text'\n\n  /** @private */\n  sectionHeadingTextFocusClass = 'govuk-accordion__section-heading-text-focus'\n\n  /** @private */\n  sectionShowHideToggleClass = 'govuk-accordion__section-toggle'\n\n  /** @private */\n  sectionShowHideToggleFocusClass = 'govuk-accordion__section-toggle-focus'\n\n  /** @private */\n  sectionShowHideTextClass = 'govuk-accordion__section-toggle-text'\n\n  /** @private */\n  upChevronIconClass = 'govuk-accordion-nav__chevron'\n\n  /** @private */\n  downChevronIconClass = 'govuk-accordion-nav__chevron--down'\n\n  /** @private */\n  sectionSummaryClass = 'govuk-accordion__section-summary'\n\n  /** @private */\n  sectionSummaryFocusClass = 'govuk-accordion__section-summary-focus'\n\n  /** @private */\n  sectionContentClass = 'govuk-accordion__section-content'\n\n  /** @private */\n  $sections\n\n  /** @private */\n  browserSupportsSessionStorage = false\n\n  /**\n   * @private\n   * @type {HTMLButtonElement | null}\n   */\n  $showAllButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllIcon = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $showAllText = null\n\n  /**\n   * @param {Element | null} $module - HTML element to use for accordion\n   * @param {AccordionConfig} [config] - Accordion config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      Accordion.defaults,\n      config,\n      normaliseDataset(Accordion, $module.dataset)\n    )\n\n    this.i18n = new I18n(this.config.i18n)\n\n    const $sections = this.$module.querySelectorAll(`.${this.sectionClass}`)\n    if (!$sections.length) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Sections (\\`<div class=\"${this.sectionClass}\">\\`)`\n      })\n    }\n\n    this.$sections = $sections\n    this.browserSupportsSessionStorage = helper.checkForSessionStorage()\n\n    this.initControls()\n    this.initSectionHeaders()\n\n    // See if \"Show all sections\" button text should be updated\n    const areAllSectionsOpen = this.checkIfAllSectionsOpen()\n    this.updateShowAllButton(areAllSectionsOpen)\n  }\n\n  /**\n   * Initialise controls and set attributes\n   *\n   * @private\n   */\n  initControls() {\n    // Create \"Show all\" button and set attributes\n    this.$showAllButton = document.createElement('button')\n    this.$showAllButton.setAttribute('type', 'button')\n    this.$showAllButton.setAttribute('class', this.showAllClass)\n    this.$showAllButton.setAttribute('aria-expanded', 'false')\n\n    // Create icon, add to element\n    this.$showAllIcon = document.createElement('span')\n    this.$showAllIcon.classList.add(this.upChevronIconClass)\n    this.$showAllButton.appendChild(this.$showAllIcon)\n\n    // Create control wrapper and add controls to it\n    const $accordionControls = document.createElement('div')\n    $accordionControls.setAttribute('class', this.controlsClass)\n    $accordionControls.appendChild(this.$showAllButton)\n    this.$module.insertBefore($accordionControls, this.$module.firstChild)\n\n    // Build additional wrapper for Show all toggle text and place after icon\n    this.$showAllText = document.createElement('span')\n    this.$showAllText.classList.add(this.showAllTextClass)\n    this.$showAllButton.appendChild(this.$showAllText)\n\n    // Handle click events on the show/hide all button\n    this.$showAllButton.addEventListener('click', () =>\n      this.onShowOrHideAllToggle()\n    )\n\n    // Handle 'beforematch' events, if the user agent supports them\n    if ('onbeforematch' in document) {\n      document.addEventListener('beforematch', (event) =>\n        this.onBeforeMatch(event)\n      )\n    }\n  }\n\n  /**\n   * Initialise section headers\n   *\n   * @private\n   */\n  initSectionHeaders() {\n    this.$sections.forEach(($section, i) => {\n      const $header = $section.querySelector(`.${this.sectionHeaderClass}`)\n      if (!$header) {\n        throw new ElementError({\n          componentName: 'Accordion',\n          identifier: `Section headers (\\`<div class=\"${this.sectionHeaderClass}\">\\`)`\n        })\n      }\n\n      // Set header attributes\n      this.constructHeaderMarkup($header, i)\n      this.setExpanded(this.isExpanded($section), $section)\n\n      // Handle events\n      $header.addEventListener('click', () => this.onSectionToggle($section))\n\n      // See if there is any state stored in sessionStorage and set the sections\n      // to open or closed.\n      this.setInitialState($section)\n    })\n  }\n\n  /**\n   * Construct section header\n   *\n   * @private\n   * @param {Element} $header - Section header\n   * @param {number} index - Section index\n   */\n  constructHeaderMarkup($header, index) {\n    const $span = $header.querySelector(`.${this.sectionButtonClass}`)\n    const $heading = $header.querySelector(`.${this.sectionHeadingClass}`)\n    const $summary = $header.querySelector(`.${this.sectionSummaryClass}`)\n\n    if (!$heading) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Section heading (\\`.${this.sectionHeadingClass}\\`)`\n      })\n    }\n\n    if (!$span) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Section button placeholder (\\`<span class=\"${this.sectionButtonClass}\">\\`)`\n      })\n    }\n\n    // Create a button element that will replace the\n    // '.govuk-accordion__section-button' span\n    const $button = document.createElement('button')\n    $button.setAttribute('type', 'button')\n    $button.setAttribute(\n      'aria-controls',\n      `${this.$module.id}-content-${index + 1}`\n    )\n\n    // Copy all attributes from $span to $button (except `id`, which gets added\n    // to the `$headingText` element)\n    for (const attr of Array.from($span.attributes)) {\n      if (attr.nodeName !== 'id') {\n        $button.setAttribute(attr.nodeName, `${attr.nodeValue}`)\n      }\n    }\n\n    // Create container for heading text so it can be styled\n    const $headingText = document.createElement('span')\n    $headingText.classList.add(this.sectionHeadingTextClass)\n    // Copy the span ID to the heading text to allow it to be referenced by\n    // `aria-labelledby` on the hidden content area without \"Show this section\"\n    $headingText.id = $span.id\n\n    // Create an inner heading text container to limit the width of the focus\n    // state\n    const $headingTextFocus = document.createElement('span')\n    $headingTextFocus.classList.add(this.sectionHeadingTextFocusClass)\n    $headingText.appendChild($headingTextFocus)\n    // span could contain HTML elements\n    // (see https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#phrasing-content)\n    $headingTextFocus.innerHTML = $span.innerHTML\n\n    // Create container for show / hide icons and text.\n    const $showHideToggle = document.createElement('span')\n    $showHideToggle.classList.add(this.sectionShowHideToggleClass)\n    // Tell Google not to index the 'show' text as part of the heading. Must be\n    // set on the element before it's added to the DOM.\n    // See https://developers.google.com/search/docs/advanced/robots/robots_meta_tag#data-nosnippet-attr\n    $showHideToggle.setAttribute('data-nosnippet', '')\n    // Create an inner container to limit the width of the focus state\n    const $showHideToggleFocus = document.createElement('span')\n    $showHideToggleFocus.classList.add(this.sectionShowHideToggleFocusClass)\n    $showHideToggle.appendChild($showHideToggleFocus)\n    // Create wrapper for the show / hide text. Append text after the show/hide icon\n    const $showHideText = document.createElement('span')\n    const $showHideIcon = document.createElement('span')\n    $showHideIcon.classList.add(this.upChevronIconClass)\n    $showHideToggleFocus.appendChild($showHideIcon)\n    $showHideText.classList.add(this.sectionShowHideTextClass)\n    $showHideToggleFocus.appendChild($showHideText)\n\n    // Append elements to the button:\n    // 1. Heading text\n    // 2. Punctuation\n    // 3. (Optional: Summary line followed by punctuation)\n    // 4. Show / hide toggle\n    $button.appendChild($headingText)\n    $button.appendChild(this.getButtonPunctuationEl())\n\n    // If summary content exists add to DOM in correct order\n    if ($summary?.parentNode) {\n      // Create a new `span` element and copy the summary line content from the\n      // original `div` to the new `span`. This is because the summary line text\n      // is now inside a button element, which can only contain phrasing\n      // content.\n      const $summarySpan = document.createElement('span')\n      // Create an inner summary container to limit the width of the summary\n      // focus state\n      const $summarySpanFocus = document.createElement('span')\n      $summarySpanFocus.classList.add(this.sectionSummaryFocusClass)\n      $summarySpan.appendChild($summarySpanFocus)\n\n      // Get original attributes, and pass them to the replacement\n      for (const attr of Array.from($summary.attributes)) {\n        $summarySpan.setAttribute(attr.nodeName, `${attr.nodeValue}`)\n      }\n\n      // Copy original contents of summary to the new summary span\n      $summarySpanFocus.innerHTML = $summary.innerHTML\n\n      // Replace the original summary `div` with the new summary `span`\n      $summary.parentNode.replaceChild($summarySpan, $summary)\n\n      $button.appendChild($summarySpan)\n      $button.appendChild(this.getButtonPunctuationEl())\n    }\n\n    $button.appendChild($showHideToggle)\n\n    $heading.removeChild($span)\n    $heading.appendChild($button)\n  }\n\n  /**\n   * When a section is opened by the user agent via the 'beforematch' event\n   *\n   * @private\n   * @param {Event} event - Generic event\n   */\n  onBeforeMatch(event) {\n    const $fragment = event.target\n\n    // Handle elements with `.closest()` support only\n    if (!($fragment instanceof Element)) {\n      return\n    }\n\n    // Handle when fragment is inside section\n    const $section = $fragment.closest(`.${this.sectionClass}`)\n    if ($section) {\n      this.setExpanded(true, $section)\n    }\n  }\n\n  /**\n   * When section toggled, set and store state\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  onSectionToggle($section) {\n    const expanded = this.isExpanded($section)\n    this.setExpanded(!expanded, $section)\n\n    // Store the state in sessionStorage when a change is triggered\n    this.storeState($section)\n  }\n\n  /**\n   * When Open/Close All toggled, set and store state\n   *\n   * @private\n   */\n  onShowOrHideAllToggle() {\n    const nowExpanded = !this.checkIfAllSectionsOpen()\n\n    this.$sections.forEach(($section) => {\n      this.setExpanded(nowExpanded, $section)\n      this.storeState($section)\n    })\n\n    this.updateShowAllButton(nowExpanded)\n  }\n\n  /**\n   * Set section attributes when opened/closed\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   * @param {Element} $section - Section element\n   */\n  setExpanded(expanded, $section) {\n    const $showHideIcon = $section.querySelector(`.${this.upChevronIconClass}`)\n    const $showHideText = $section.querySelector(\n      `.${this.sectionShowHideTextClass}`\n    )\n    const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n    const $content = $section.querySelector(`.${this.sectionContentClass}`)\n\n    if (!$content) {\n      throw new ElementError({\n        componentName: 'Accordion',\n        identifier: `Section content (\\`<div class=\"${this.sectionContentClass}\">\\`)`\n      })\n    }\n\n    if (!$showHideIcon || !$showHideText || !$button) {\n      // Return early for elements we create\n      return\n    }\n\n    const newButtonText = expanded\n      ? this.i18n.t('hideSection')\n      : this.i18n.t('showSection')\n\n    $showHideText.textContent = newButtonText\n    $button.setAttribute('aria-expanded', `${expanded}`)\n\n    // Update aria-label combining\n    const ariaLabelParts = []\n\n    const $headingText = $section.querySelector(\n      `.${this.sectionHeadingTextClass}`\n    )\n    if ($headingText) {\n      ariaLabelParts.push(`${$headingText.textContent}`.trim())\n    }\n\n    const $summary = $section.querySelector(`.${this.sectionSummaryClass}`)\n    if ($summary) {\n      ariaLabelParts.push(`${$summary.textContent}`.trim())\n    }\n\n    const ariaLabelMessage = expanded\n      ? this.i18n.t('hideSectionAriaLabel')\n      : this.i18n.t('showSectionAriaLabel')\n    ariaLabelParts.push(ariaLabelMessage)\n\n    /*\n     * Join with a comma to add pause for assistive technology.\n     * Example: [heading]Section A ,[pause] Show this section.\n     * https://accessibility.blog.gov.uk/2017/12/18/what-working-on-gov-uk-navigation-taught-us-about-accessibility/\n     */\n    $button.setAttribute('aria-label', ariaLabelParts.join(' , '))\n\n    // Swap icon, change class\n    if (expanded) {\n      $content.removeAttribute('hidden')\n      $section.classList.add(this.sectionExpandedClass)\n      $showHideIcon.classList.remove(this.downChevronIconClass)\n    } else {\n      $content.setAttribute('hidden', 'until-found')\n      $section.classList.remove(this.sectionExpandedClass)\n      $showHideIcon.classList.add(this.downChevronIconClass)\n    }\n\n    // See if \"Show all sections\" button text should be updated\n    const areAllSectionsOpen = this.checkIfAllSectionsOpen()\n    this.updateShowAllButton(areAllSectionsOpen)\n  }\n\n  /**\n   * Get state of section\n   *\n   * @private\n   * @param {Element} $section - Section element\n   * @returns {boolean} True if expanded\n   */\n  isExpanded($section) {\n    return $section.classList.contains(this.sectionExpandedClass)\n  }\n\n  /**\n   * Check if all sections are open\n   *\n   * @private\n   * @returns {boolean} True if all sections are open\n   */\n  checkIfAllSectionsOpen() {\n    const sectionsCount = this.$sections.length\n    const expandedSectionCount = this.$module.querySelectorAll(\n      `.${this.sectionExpandedClass}`\n    ).length\n    const areAllSectionsOpen = sectionsCount === expandedSectionCount\n\n    return areAllSectionsOpen\n  }\n\n  /**\n   * Update \"Show all sections\" button\n   *\n   * @private\n   * @param {boolean} expanded - Section expanded\n   */\n  updateShowAllButton(expanded) {\n    if (!this.$showAllButton || !this.$showAllText || !this.$showAllIcon) {\n      return\n    }\n\n    this.$showAllButton.setAttribute('aria-expanded', expanded.toString())\n    this.$showAllText.textContent = expanded\n      ? this.i18n.t('hideAllSections')\n      : this.i18n.t('showAllSections')\n    this.$showAllIcon.classList.toggle(this.downChevronIconClass, !expanded)\n  }\n\n  /**\n   * Set the state of the accordions in sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  storeState($section) {\n    if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n      // We need a unique way of identifying each content in the Accordion.\n      // Since an `#id` should be unique and an `id` is required for `aria-`\n      // attributes `id` can be safely used.\n      const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n      if ($button) {\n        const contentId = $button.getAttribute('aria-controls')\n        const contentState = $button.getAttribute('aria-expanded')\n\n        // Only set the state when both `contentId` and `contentState` are taken\n        // from the DOM.\n        if (contentId && contentState) {\n          window.sessionStorage.setItem(contentId, contentState)\n        }\n      }\n    }\n  }\n\n  /**\n   * Read the state of the accordions from sessionStorage\n   *\n   * @private\n   * @param {Element} $section - Section element\n   */\n  setInitialState($section) {\n    if (this.browserSupportsSessionStorage && this.config.rememberExpanded) {\n      const $button = $section.querySelector(`.${this.sectionButtonClass}`)\n\n      if ($button) {\n        const contentId = $button.getAttribute('aria-controls')\n        const contentState = contentId\n          ? window.sessionStorage.getItem(contentId)\n          : null\n\n        if (contentState !== null) {\n          this.setExpanded(contentState === 'true', $section)\n        }\n      }\n    }\n  }\n\n  /**\n   * Create an element to improve semantics of the section button with\n   * punctuation\n   *\n   * Adding punctuation to the button can also improve its general semantics by\n   * dividing its contents into thematic chunks. See\n   * https://github.com/alphagov/govuk-frontend/issues/2327#issuecomment-922957442\n   *\n   * @private\n   * @returns {Element} DOM element\n   */\n  getButtonPunctuationEl() {\n    const $punctuationEl = document.createElement('span')\n    $punctuationEl.classList.add(\n      'govuk-visually-hidden',\n      this.sectionHeadingDividerClass\n    )\n    $punctuationEl.innerHTML = ', '\n    return $punctuationEl\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-accordion'\n\n  /**\n   * Accordion default config\n   *\n   * @see {@link AccordionConfig}\n   * @constant\n   * @type {AccordionConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      hideAllSections: 'Hide all sections',\n      hideSection: 'Hide',\n      hideSectionAriaLabel: 'Hide this section',\n      showAllSections: 'Show all sections',\n      showSection: 'Show',\n      showSectionAriaLabel: 'Show this section'\n    },\n    rememberExpanded: true\n  })\n\n  /**\n   * Accordion config schema\n   *\n   * @constant\n   * @satisfies {Schema}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' },\n      rememberExpanded: { type: 'boolean' }\n    }\n  })\n}\n\nconst helper = {\n  /**\n   * Check for `window.sessionStorage`, and that it actually works.\n   *\n   * @returns {boolean} True if session storage is available\n   */\n  checkForSessionStorage: function () {\n    const testString = 'this is the test string'\n    let result\n    try {\n      window.sessionStorage.setItem(testString, testString)\n      result =\n        window.sessionStorage.getItem(testString) === testString.toString()\n      window.sessionStorage.removeItem(testString)\n      return result\n    } catch (exception) {\n      return false\n    }\n  }\n}\n\n/**\n * Accordion config\n *\n * @see {@link Accordion.defaults}\n * @typedef {object} AccordionConfig\n * @property {AccordionTranslations} [i18n=Accordion.defaults.i18n] - Accordion translations\n * @property {boolean} [rememberExpanded] - Whether the expanded and collapsed\n *   state of each section is remembered and restored when navigating.\n */\n\n/**\n * Accordion translations\n *\n * @see {@link Accordion.defaults.i18n}\n * @typedef {object} AccordionTranslations\n *\n * Messages used by the component for the labels of its buttons. This includes\n * the visible text shown on screen, and text to help assistive technology users\n * for the buttons toggling each section.\n * @property {string} [hideAllSections] - The text content for the 'Hide all\n *   sections' button, used when at least one section is expanded.\n * @property {string} [hideSection] - The text content for the 'Hide'\n *   button, used when a section is expanded.\n * @property {string} [hideSectionAriaLabel] - The text content appended to the\n *   'Hide' button's accessible name when a section is expanded.\n * @property {string} [showAllSections] - The text content for the 'Show all\n *   sections' button, used when all sections are collapsed.\n * @property {string} [showSection] - The text content for the 'Show'\n *   button, used when a section is collapsed.\n * @property {string} [showSectionAriaLabel] - The text content appended to the\n *   'Show' button's accessible name when a section is expanded.\n */\n\n/**\n * @typedef {import('../../common/index.mjs').Schema} Schema\n */\n","import { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\nconst DEBOUNCE_TIMEOUT_IN_SECONDS = 1\n\n/**\n * JavaScript enhancements for the Button component\n *\n * @preserve\n */\nexport class Button extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ButtonConfig}\n   */\n  config\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  debounceFormSubmitTimer = null\n\n  /**\n   * @param {Element | null} $module - HTML element to use for button\n   * @param {ButtonConfig} [config] - Button config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Button',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      Button.defaults,\n      config,\n      normaliseDataset(Button, $module.dataset)\n    )\n\n    this.$module.addEventListener('keydown', (event) =>\n      this.handleKeyDown(event)\n    )\n    this.$module.addEventListener('click', (event) => this.debounce(event))\n  }\n\n  /**\n   * Trigger a click event when the space key is pressed\n   *\n   * Some screen readers tell users they can use the space bar to activate\n   * things with the 'button' role, so we need to match the functionality of\n   * native HTML buttons.\n   *\n   * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  handleKeyDown(event) {\n    const $target = event.target\n\n    // Handle space bar only\n    if (event.key !== ' ') {\n      return\n    }\n\n    // Handle elements with [role=\"button\"] only\n    if (\n      $target instanceof HTMLElement &&\n      $target.getAttribute('role') === 'button'\n    ) {\n      event.preventDefault() // prevent the page from scrolling\n      $target.click()\n    }\n  }\n\n  /**\n   * Debounce double-clicks\n   *\n   * If the click quickly succeeds a previous click then nothing will happen.\n   * This stops people accidentally causing multiple form submissions by double\n   * clicking buttons.\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {undefined | false} Returns undefined, or false when debounced\n   */\n  debounce(event) {\n    // Check the button that was clicked has preventDoubleClick enabled\n    if (!this.config.preventDoubleClick) {\n      return\n    }\n\n    // If the timer is still running, prevent the click from submitting the form\n    if (this.debounceFormSubmitTimer) {\n      event.preventDefault()\n      return false\n    }\n\n    this.debounceFormSubmitTimer = window.setTimeout(() => {\n      this.debounceFormSubmitTimer = null\n    }, DEBOUNCE_TIMEOUT_IN_SECONDS * 1000)\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-button'\n\n  /**\n   * Button default config\n   *\n   * @see {@link ButtonConfig}\n   * @constant\n   * @type {ButtonConfig}\n   */\n  static defaults = Object.freeze({\n    preventDoubleClick: false\n  })\n\n  /**\n   * Button config schema\n   *\n   * @constant\n   * @satisfies {Schema}\n   */\n  static schema = Object.freeze({\n    properties: {\n      preventDoubleClick: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Button config\n *\n * @typedef {object} ButtonConfig\n * @property {boolean} [preventDoubleClick=false] - Prevent accidental double\n *   clicks on submit buttons from submitting forms multiple times.\n */\n\n/**\n * @typedef {import('../../common/index.mjs').Schema} Schema\n */\n","/**\n * Returns the value of the given attribute closest to the given element (including itself)\n *\n * @internal\n * @param {Element} $element - The element to start walking the DOM tree up\n * @param {string} attributeName - The name of the attribute\n * @returns {string | null} Attribute value\n */\nexport function closestAttributeValue($element, attributeName) {\n  const $closestElementWithAttribute = $element.closest(`[${attributeName}]`)\n  return $closestElementWithAttribute\n    ? $closestElementWithAttribute.getAttribute(attributeName)\n    : null\n}\n","import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport { mergeConfigs, validateConfig } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ConfigError, ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Character count component\n *\n * Tracks the number of characters or words in the `.govuk-js-character-count`\n * `<textarea>` inside the element. Displays a message with the remaining number\n * of characters/words available, or the number of characters/words in excess.\n *\n * You can configure the message to only appear after a certain percentage\n * of the available characters/words has been entered.\n *\n * @preserve\n */\nexport class CharacterCount extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $textarea\n\n  /** @private */\n  $visibleCountMessage\n\n  /** @private */\n  $screenReaderCountMessage\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  lastInputTimestamp = null\n\n  /** @private */\n  lastInputValue = ''\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  valueChecker = null\n\n  /**\n   * @private\n   * @type {CharacterCountConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  maxLength\n\n  /**\n   * @param {Element | null} $module - HTML element to use for character count\n   * @param {CharacterCountConfig} [config] - Character count config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Character count',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $textarea = $module.querySelector('.govuk-js-character-count')\n    if (\n      !(\n        $textarea instanceof HTMLTextAreaElement ||\n        $textarea instanceof HTMLInputElement\n      )\n    ) {\n      throw new ElementError({\n        componentName: 'Character count',\n        element: $textarea,\n        expectedType: 'HTMLTextareaElement or HTMLInputElement',\n        identifier: 'Form field (`.govuk-js-character-count`)'\n      })\n    }\n\n    // Read config set using dataset ('data-' values)\n    const datasetConfig = normaliseDataset(CharacterCount, $module.dataset)\n\n    // To ensure data-attributes take complete precedence, even if they change\n    // the type of count, we need to reset the `maxlength` and `maxwords` from\n    // the JavaScript config.\n    //\n    // We can't mutate `config`, though, as it may be shared across multiple\n    // components inside `initAll`.\n    /** @type {CharacterCountConfig} */\n    let configOverrides = {}\n    if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\n      configOverrides = {\n        maxlength: undefined,\n        maxwords: undefined\n      }\n    }\n\n    this.config = mergeConfigs(\n      CharacterCount.defaults,\n      config,\n      configOverrides,\n      datasetConfig\n    )\n\n    // Check for valid config\n    const errors = validateConfig(CharacterCount.schema, this.config)\n    if (errors[0]) {\n      throw new ConfigError(`Character count: ${errors[0]}`)\n    }\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue($module, 'lang')\n    })\n\n    // Determine the limit attribute (characters or words)\n    this.maxLength = this.config.maxwords ?? this.config.maxlength ?? Infinity\n\n    this.$module = $module\n    this.$textarea = $textarea\n\n    const textareaDescriptionId = `${this.$textarea.id}-info`\n    const $textareaDescription = document.getElementById(textareaDescriptionId)\n    if (!$textareaDescription) {\n      throw new ElementError({\n        componentName: 'Character count',\n        element: $textareaDescription,\n        identifier: `Count message (\\`id=\"${textareaDescriptionId}\"\\`)`\n      })\n    }\n\n    // Inject a description for the textarea if none is present already\n    // for when the component was rendered with no maxlength, maxwords\n    // nor custom textareaDescriptionText\n    if (`${$textareaDescription.textContent}`.match(/^\\s*$/)) {\n      $textareaDescription.textContent = this.i18n.t('textareaDescription', {\n        count: this.maxLength\n      })\n    }\n\n    // Move the textarea description to be immediately after the textarea\n    // Kept for backwards compatibility\n    this.$textarea.insertAdjacentElement('afterend', $textareaDescription)\n\n    // Create the *screen reader* specific live-updating counter\n    // This doesn't need any styling classes, as it is never visible\n    const $screenReaderCountMessage = document.createElement('div')\n    $screenReaderCountMessage.className =\n      'govuk-character-count__sr-status govuk-visually-hidden'\n    $screenReaderCountMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderCountMessage = $screenReaderCountMessage\n    $textareaDescription.insertAdjacentElement(\n      'afterend',\n      $screenReaderCountMessage\n    )\n\n    // Create our live-updating counter element, copying the classes from the\n    // textarea description for backwards compatibility as these may have been\n    // configured\n    const $visibleCountMessage = document.createElement('div')\n    $visibleCountMessage.className = $textareaDescription.className\n    $visibleCountMessage.classList.add('govuk-character-count__status')\n    $visibleCountMessage.setAttribute('aria-hidden', 'true')\n    this.$visibleCountMessage = $visibleCountMessage\n    $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage)\n\n    // Hide the textarea description\n    $textareaDescription.classList.add('govuk-visually-hidden')\n\n    // Remove hard limit if set\n    this.$textarea.removeAttribute('maxlength')\n\n    this.bindChangeEvents()\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.updateCountMessage())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so update now too.\n    this.updateCountMessage()\n  }\n\n  /**\n   * Bind change events\n   *\n   * Set up event listeners on the $textarea so that the count messages update\n   * when the user types.\n   *\n   * @private\n   */\n  bindChangeEvents() {\n    this.$textarea.addEventListener('keyup', () => this.handleKeyUp())\n\n    // Bind focus/blur events to start/stop polling\n    this.$textarea.addEventListener('focus', () => this.handleFocus())\n    this.$textarea.addEventListener('blur', () => this.handleBlur())\n  }\n\n  /**\n   * Handle key up event\n   *\n   * Update the visible character counter and keep track of when the last update\n   * happened for each keypress\n   *\n   * @private\n   */\n  handleKeyUp() {\n    this.updateVisibleCountMessage()\n    this.lastInputTimestamp = Date.now()\n  }\n\n  /**\n   * Handle focus event\n   *\n   * Speech recognition software such as Dragon NaturallySpeaking will modify\n   * the fields by directly changing its `value`. These changes don't trigger\n   * events in JavaScript, so we need to poll to handle when and if they occur.\n   *\n   * Once the keyup event hasn't been detected for at least 1000 ms (1s), check\n   * if the textarea value has changed and update the count message if it has.\n   *\n   * This is so that the update triggered by the manual comparison doesn't\n   * conflict with debounced KeyboardEvent updates.\n   *\n   * @private\n   */\n  handleFocus() {\n    this.valueChecker = window.setInterval(() => {\n      if (\n        !this.lastInputTimestamp ||\n        Date.now() - 500 >= this.lastInputTimestamp\n      ) {\n        this.updateIfValueChanged()\n      }\n    }, 1000)\n  }\n\n  /**\n   * Handle blur event\n   *\n   * Stop checking the textarea value once the textarea no longer has focus\n   *\n   * @private\n   */\n  handleBlur() {\n    // Cancel value checking on blur\n    if (this.valueChecker) {\n      window.clearInterval(this.valueChecker)\n    }\n  }\n\n  /**\n   * Update count message if textarea value has changed\n   *\n   * @private\n   */\n  updateIfValueChanged() {\n    if (this.$textarea.value !== this.lastInputValue) {\n      this.lastInputValue = this.$textarea.value\n      this.updateCountMessage()\n    }\n  }\n\n  /**\n   * Update count message\n   *\n   * Helper function to update both the visible and screen reader-specific\n   * counters simultaneously (e.g. on init)\n   *\n   * @private\n   */\n  updateCountMessage() {\n    this.updateVisibleCountMessage()\n    this.updateScreenReaderCountMessage()\n  }\n\n  /**\n   * Update visible count message\n   *\n   * @private\n   */\n  updateVisibleCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const isError = remainingNumber < 0\n\n    // If input is over the threshold, remove the disabled class which renders\n    // the counter invisible.\n    this.$visibleCountMessage.classList.toggle(\n      'govuk-character-count__message--disabled',\n      !this.isOverThreshold()\n    )\n\n    // Update styles\n    this.$textarea.classList.toggle('govuk-textarea--error', isError)\n    this.$visibleCountMessage.classList.toggle('govuk-error-message', isError)\n    this.$visibleCountMessage.classList.toggle('govuk-hint', !isError)\n\n    // Update message\n    this.$visibleCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Update screen reader count message\n   *\n   * @private\n   */\n  updateScreenReaderCountMessage() {\n    // If over the threshold, remove the aria-hidden attribute, allowing screen\n    // readers to announce the content of the element.\n    if (this.isOverThreshold()) {\n      this.$screenReaderCountMessage.removeAttribute('aria-hidden')\n    } else {\n      this.$screenReaderCountMessage.setAttribute('aria-hidden', 'true')\n    }\n\n    // Update message\n    this.$screenReaderCountMessage.textContent = this.getCountMessage()\n  }\n\n  /**\n   * Count the number of characters (or words, if `config.maxwords` is set)\n   * in the given text\n   *\n   * @private\n   * @param {string} text - The text to count the characters of\n   * @returns {number} the number of characters (or words) in the text\n   */\n  count(text) {\n    if (this.config.maxwords) {\n      const tokens = text.match(/\\S+/g) ?? [] // Matches consecutive non-whitespace chars\n      return tokens.length\n    }\n\n    return text.length\n  }\n\n  /**\n   * Get count message\n   *\n   * @private\n   * @returns {string} Status message\n   */\n  getCountMessage() {\n    const remainingNumber = this.maxLength - this.count(this.$textarea.value)\n    const countType = this.config.maxwords ? 'words' : 'characters'\n    return this.formatCountMessage(remainingNumber, countType)\n  }\n\n  /**\n   * Formats the message shown to users according to what's counted\n   * and how many remain\n   *\n   * @private\n   * @param {number} remainingNumber - The number of words/characaters remaining\n   * @param {string} countType - \"words\" or \"characters\"\n   * @returns {string} Status message\n   */\n  formatCountMessage(remainingNumber, countType) {\n    if (remainingNumber === 0) {\n      return this.i18n.t(`${countType}AtLimit`)\n    }\n\n    const translationKeySuffix =\n      remainingNumber < 0 ? 'OverLimit' : 'UnderLimit'\n\n    return this.i18n.t(`${countType}${translationKeySuffix}`, {\n      count: Math.abs(remainingNumber)\n    })\n  }\n\n  /**\n   * Check if count is over threshold\n   *\n   * Checks whether the value is over the configured threshold for the input.\n   * If there is no configured threshold, it is set to 0 and this function will\n   * always return true.\n   *\n   * @private\n   * @returns {boolean} true if the current count is over the config.threshold\n   *   (or no threshold is set)\n   */\n  isOverThreshold() {\n    // No threshold means we're always above threshold so save some computation\n    if (!this.config.threshold) {\n      return true\n    }\n\n    // Determine the remaining number of characters/words\n    const currentLength = this.count(this.$textarea.value)\n    const maxLength = this.maxLength\n\n    const thresholdValue = (maxLength * this.config.threshold) / 100\n\n    return thresholdValue <= currentLength\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-character-count'\n\n  /**\n   * Character count default config\n   *\n   * @see {@link CharacterCountConfig}\n   * @constant\n   * @type {CharacterCountConfig}\n   */\n  static defaults = Object.freeze({\n    threshold: 0,\n    i18n: {\n      // Characters\n      charactersUnderLimit: {\n        one: 'You have %{count} character remaining',\n        other: 'You have %{count} characters remaining'\n      },\n      charactersAtLimit: 'You have 0 characters remaining',\n      charactersOverLimit: {\n        one: 'You have %{count} character too many',\n        other: 'You have %{count} characters too many'\n      },\n      // Words\n      wordsUnderLimit: {\n        one: 'You have %{count} word remaining',\n        other: 'You have %{count} words remaining'\n      },\n      wordsAtLimit: 'You have 0 words remaining',\n      wordsOverLimit: {\n        one: 'You have %{count} word too many',\n        other: 'You have %{count} words too many'\n      },\n      textareaDescription: {\n        other: ''\n      }\n    }\n  })\n\n  /**\n   * Character count config schema\n   *\n   * @constant\n   * @satisfies {Schema}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' },\n      maxwords: { type: 'number' },\n      maxlength: { type: 'number' },\n      threshold: { type: 'number' }\n    },\n    anyOf: [\n      {\n        required: ['maxwords'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      },\n      {\n        required: ['maxlength'],\n        errorMessage: 'Either \"maxlength\" or \"maxwords\" must be provided'\n      }\n    ]\n  })\n}\n\n/**\n * Character count config\n *\n * @see {@link CharacterCount.defaults}\n * @typedef {object} CharacterCountConfig\n * @property {number} [maxlength] - The maximum number of characters.\n *   If maxwords is provided, the maxlength option will be ignored.\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\n *   provided, the maxlength option will be ignored.\n * @property {number} [threshold=0] - The percentage value of the limit at\n *   which point the count message is displayed. If this attribute is set, the\n *   count message will be hidden by default.\n * @property {CharacterCountTranslations} [i18n=CharacterCount.defaults.i18n] - Character count translations\n */\n\n/**\n * Character count translations\n *\n * @see {@link CharacterCount.defaults.i18n}\n * @typedef {object} CharacterCountTranslations\n *\n * Messages shown to users as they type. It provides feedback on how many words\n * or characters they have remaining or if they are over the limit. This also\n * includes a message used as an accessible description for the textarea.\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\n *   when the number of characters is under the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [charactersAtLimit] - Message displayed when the number of\n *   characters reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\n *   when the number of characters is over the configured maximum, `maxlength`.\n *   This message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining characters. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\n *   the number of words is under the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {string} [wordsAtLimit] - Message displayed when the number of\n *   words reaches the configured maximum, `maxlength`. This message is\n *   displayed visually and through assistive technologies.\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\n *   the number of words is over the configured maximum, `maxlength`. This\n *   message is displayed visually and through assistive technologies. The\n *   component will replace the `%{count}` placeholder with the number of\n *   remaining words. This is a [pluralised list of\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\n * @property {TranslationPluralForms} [textareaDescription] - Message made\n *   available to assistive technologies, if none is already present in the\n *   HTML, to describe that the component accepts only a limited amount of\n *   content. It is visible on the page when JavaScript is unavailable. The\n *   component will replace the `%{count}` placeholder with the value of the\n *   `maxlength` or `maxwords` parameter.\n */\n\n/**\n * @typedef {import('../../common/index.mjs').Schema} Schema\n * @typedef {import('../../i18n.mjs').TranslationPluralForms} TranslationPluralForms\n */\n","import { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Checkboxes component\n *\n * @preserve\n */\nexport class Checkboxes extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $inputs\n\n  /**\n   * Checkboxes can be associated with a 'conditionally revealed' content block\n   * â€“ for example, a checkbox for 'Phone' could reveal an additional form field\n   * for the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which\n   * is promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page\n   * (for example if the user has navigated back), and set up event handlers to\n   * keep the reveal in sync with the checkbox state.\n   *\n   * @param {Element | null} $module - HTML element to use for checkboxes\n   */\n  constructor($module) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Checkboxes',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $inputs = $module.querySelectorAll('input[type=\"checkbox\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        componentName: 'Checkboxes',\n        identifier: 'Form inputs (`<input type=\"checkbox\">`)'\n      })\n    }\n\n    this.$module = $module\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          componentName: 'Checkboxes',\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all checkboxes in this $module.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if ($target?.classList.contains('govuk-checkboxes__conditional')) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-checkboxes__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Uncheck other checkboxes\n   *\n   * Find any other checkbox inputs with the same name value, and uncheck them.\n   * This is useful for when a â€œNone of these\" checkbox is checked.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckAllInputsExcept($input) {\n    const allInputsWithSameName = document.querySelectorAll(\n      `input[type=\"checkbox\"][name=\"${$input.name}\"]`\n    )\n\n    allInputsWithSameName.forEach(($inputWithSameName) => {\n      const hasSameFormOwner = $input.form === $inputWithSameName.form\n      if (hasSameFormOwner && $inputWithSameName !== $input) {\n        $inputWithSameName.checked = false\n        this.syncConditionalRevealWithInputState($inputWithSameName)\n      }\n    })\n  }\n\n  /**\n   * Uncheck exclusive checkboxes\n   *\n   * Find any checkbox inputs with the same name value and the 'exclusive'\n   * behaviour, and uncheck them. This helps prevent someone checking both a\n   * regular checkbox and a \"None of these\" checkbox in the same fieldset.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Checkbox input\n   */\n  unCheckExclusiveInputs($input) {\n    const allInputsWithSameNameAndExclusiveBehaviour =\n      document.querySelectorAll(\n        `input[data-behaviour=\"exclusive\"][type=\"checkbox\"][name=\"${$input.name}\"]`\n      )\n\n    allInputsWithSameNameAndExclusiveBehaviour.forEach(($exclusiveInput) => {\n      const hasSameFormOwner = $input.form === $exclusiveInput.form\n      if (hasSameFormOwner) {\n        $exclusiveInput.checked = false\n        this.syncConditionalRevealWithInputState($exclusiveInput)\n      }\n    })\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the $module â€“ if the click occurred on a checkbox,\n   * sync the state of any associated conditional reveal with the checkbox\n   * state.\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't checkbox inputs\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'checkbox'\n    ) {\n      return\n    }\n\n    // If the checkbox conditionally-reveals some content, sync the state\n    const hasAriaControls = $clickedInput.getAttribute('aria-controls')\n    if (hasAriaControls) {\n      this.syncConditionalRevealWithInputState($clickedInput)\n    }\n\n    // No further behaviour needed for unchecking\n    if (!$clickedInput.checked) {\n      return\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    const hasBehaviourExclusive =\n      $clickedInput.getAttribute('data-behaviour') === 'exclusive'\n    if (hasBehaviourExclusive) {\n      this.unCheckAllInputsExcept($clickedInput)\n    } else {\n      this.unCheckExclusiveInputs($clickedInput)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-checkboxes'\n}\n","import {\n  getFragmentFromUrl,\n  mergeConfigs,\n  setFocus\n} from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Error summary component\n *\n * Takes focus on initialisation for accessible announcement, unless disabled in\n * configuration.\n *\n * @preserve\n */\nexport class ErrorSummary extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ErrorSummaryConfig}\n   */\n  config\n\n  /**\n   * @param {Element | null} $module - HTML element to use for error summary\n   * @param {ErrorSummaryConfig} [config] - Error summary config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Error summary',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      ErrorSummary.defaults,\n      config,\n      normaliseDataset(ErrorSummary, $module.dataset)\n    )\n\n    /**\n     * Focus the error summary\n     */\n    if (!this.config.disableAutoFocus) {\n      setFocus(this.$module)\n    }\n\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Click event handler\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $target = event.target\n    if ($target && this.focusTarget($target)) {\n      event.preventDefault()\n    }\n  }\n\n  /**\n   * Focus the target element\n   *\n   * By default, the browser will scroll the target into view. Because our\n   * labels or legends appear above the input, this means the user will be\n   * presented with an input without any context, as the label or legend will be\n   * off the top of the screen.\n   *\n   * Manually handling the click event, scrolling the question into view and\n   * then focussing the element solves this.\n   *\n   * This also results in the label and/or legend being announced correctly in\n   * NVDA (as tested in 2018.3.2) - without this only the field type is\n   * announced (e.g. \"Edit, has autocomplete\").\n   *\n   * @private\n   * @param {EventTarget} $target - Event target\n   * @returns {boolean} True if the target was able to be focussed\n   */\n  focusTarget($target) {\n    // If the element that was clicked was not a link, return early\n    if (!($target instanceof HTMLAnchorElement)) {\n      return false\n    }\n\n    const inputId = getFragmentFromUrl($target.href)\n    if (!inputId) {\n      return false\n    }\n\n    const $input = document.getElementById(inputId)\n    if (!$input) {\n      return false\n    }\n\n    const $legendOrLabel = this.getAssociatedLegendOrLabel($input)\n    if (!$legendOrLabel) {\n      return false\n    }\n\n    // Scroll the legend or label into view *before* calling focus on the input\n    // to avoid extra scrolling in browsers that don't support `preventScroll`\n    // (which at time of writing is most of them...)\n    $legendOrLabel.scrollIntoView()\n    $input.focus({ preventScroll: true })\n\n    return true\n  }\n\n  /**\n   * Get associated legend or label\n   *\n   * Returns the first element that exists from this list:\n   *\n   * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n   *   as the top of it is no more than half a viewport height away from the\n   *   bottom of the input\n   * - The first `<label>` that is associated with the input using for=\"inputId\"\n   * - The closest parent `<label>`\n   *\n   * @private\n   * @param {Element} $input - The input\n   * @returns {Element | null} Associated legend or label, or null if no\n   *   associated legend or label can be found\n   */\n  getAssociatedLegendOrLabel($input) {\n    const $fieldset = $input.closest('fieldset')\n\n    if ($fieldset) {\n      const $legends = $fieldset.getElementsByTagName('legend')\n\n      if ($legends.length) {\n        const $candidateLegend = $legends[0]\n\n        // If the input type is radio or checkbox, always use the legend if\n        // there is one.\n        if (\n          $input instanceof HTMLInputElement &&\n          ($input.type === 'checkbox' || $input.type === 'radio')\n        ) {\n          return $candidateLegend\n        }\n\n        // For other input types, only scroll to the fieldsetâ€™s legend (instead\n        // of the label associated with the input) if the input would end up in\n        // the top half of the screen.\n        //\n        // This should avoid situations where the input either ends up off the\n        // screen, or obscured by a software keyboard.\n        const legendTop = $candidateLegend.getBoundingClientRect().top\n        const inputRect = $input.getBoundingClientRect()\n\n        // If the browser doesn't support Element.getBoundingClientRect().height\n        // or window.innerHeight (like IE8), bail and just link to the label.\n        if (inputRect.height && window.innerHeight) {\n          const inputBottom = inputRect.top + inputRect.height\n\n          if (inputBottom - legendTop < window.innerHeight / 2) {\n            return $candidateLegend\n          }\n        }\n      }\n    }\n\n    return (\n      document.querySelector(`label[for='${$input.getAttribute('id')}']`) ??\n      $input.closest('label')\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-error-summary'\n\n  /**\n   * Error summary default config\n   *\n   * @see {@link ErrorSummaryConfig}\n   * @constant\n   * @type {ErrorSummaryConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Error summary config schema\n   *\n   * @constant\n   * @satisfies {Schema}\n   */\n  static schema = Object.freeze({\n    properties: {\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Error summary config\n *\n * @typedef {object} ErrorSummaryConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the error\n *   summary will not be focussed when the page loads.\n */\n\n/**\n * @typedef {import('../../common/index.mjs').Schema} Schema\n */\n","import { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Exit this page component\n *\n * @preserve\n */\nexport class ExitThisPage extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {ExitThisPageConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /** @private */\n  $button\n\n  /**\n   * @private\n   * @type {HTMLAnchorElement | null}\n   */\n  $skiplinkButton = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $updateSpan = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $indicatorContainer = null\n\n  /**\n   * @private\n   * @type {HTMLElement | null}\n   */\n  $overlay = null\n\n  /** @private */\n  keypressCounter = 0\n\n  /** @private */\n  lastKeyWasModified = false\n\n  /** @private */\n  timeoutTime = 5000 // milliseconds\n\n  // Store the timeout events so that we can clear them to avoid user keypresses overlapping\n  // setTimeout returns an id that we can use to clear it with clearTimeout,\n  // hence the 'Id' suffix\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  keypressTimeoutId = null\n\n  /**\n   * @private\n   * @type {number | null}\n   */\n  timeoutMessageId = null\n\n  /**\n   * @param {Element | null} $module - HTML element that wraps the Exit This Page button\n   * @param {ExitThisPageConfig} [config] - Exit This Page config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Exit this page',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $button = $module.querySelector('.govuk-exit-this-page__button')\n    if (!($button instanceof HTMLAnchorElement)) {\n      throw new ElementError({\n        componentName: 'Exit this page',\n        element: $button,\n        expectedType: 'HTMLAnchorElement',\n        identifier: 'Button (`.govuk-exit-this-page__button`)'\n      })\n    }\n\n    this.config = mergeConfigs(\n      ExitThisPage.defaults,\n      config,\n      normaliseDataset(ExitThisPage, $module.dataset)\n    )\n\n    this.i18n = new I18n(this.config.i18n)\n    this.$module = $module\n    this.$button = $button\n\n    const $skiplinkButton = document.querySelector(\n      '.govuk-js-exit-this-page-skiplink'\n    )\n    if ($skiplinkButton instanceof HTMLAnchorElement) {\n      this.$skiplinkButton = $skiplinkButton\n    }\n\n    this.buildIndicator()\n    this.initUpdateSpan()\n    this.initButtonClickHandler()\n\n    // Check to see if this has already been done by a previous initialisation of ExitThisPage\n    if (!('govukFrontendExitThisPageKeypress' in document.body.dataset)) {\n      document.addEventListener('keyup', this.handleKeypress.bind(this), true)\n      document.body.dataset.govukFrontendExitThisPageKeypress = 'true'\n    }\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // blank overlay remains present, rendering the page unusable. Here, we check\n    // to see if it's present on page (re)load, and remove it if so.\n    window.addEventListener('pageshow', this.resetPage.bind(this))\n  }\n\n  /**\n   * Create the <span> we use for screen reader announcements.\n   *\n   * @private\n   */\n  initUpdateSpan() {\n    this.$updateSpan = document.createElement('span')\n    this.$updateSpan.setAttribute('role', 'status')\n    this.$updateSpan.className = 'govuk-visually-hidden'\n\n    this.$module.appendChild(this.$updateSpan)\n  }\n\n  /**\n   * Create button click handlers.\n   *\n   * @private\n   */\n  initButtonClickHandler() {\n    // Main EtP button\n    this.$button.addEventListener('click', this.handleClick.bind(this))\n\n    // EtP secondary link\n    if (this.$skiplinkButton) {\n      this.$skiplinkButton.addEventListener(\n        'click',\n        this.handleClick.bind(this)\n      )\n    }\n  }\n\n  /**\n   * Create the HTML for the 'three lights' indicator on the button.\n   *\n   * @private\n   */\n  buildIndicator() {\n    // Build container\n    // Putting `aria-hidden` on it as it won't contain any readable information\n    this.$indicatorContainer = document.createElement('div')\n    this.$indicatorContainer.className = 'govuk-exit-this-page__indicator'\n    this.$indicatorContainer.setAttribute('aria-hidden', 'true')\n\n    // Create three 'lights' and place them within the container\n    for (let i = 0; i < 3; i++) {\n      const $indicator = document.createElement('div')\n      $indicator.className = 'govuk-exit-this-page__indicator-light'\n      this.$indicatorContainer.appendChild($indicator)\n    }\n\n    // Append it all to the module\n    this.$button.appendChild(this.$indicatorContainer)\n  }\n\n  /**\n   * Update whether the lights are visible and which ones are lit up depending on\n   * the value of `keypressCounter`.\n   *\n   * @private\n   */\n  updateIndicator() {\n    if (!this.$indicatorContainer) {\n      return\n    }\n\n    // Show or hide the indicator container depending on keypressCounter value\n    this.$indicatorContainer.classList.toggle(\n      'govuk-exit-this-page__indicator--visible',\n      this.keypressCounter > 0\n    )\n\n    // Turn on only the indicators we want on\n    const $indicators = this.$indicatorContainer.querySelectorAll(\n      '.govuk-exit-this-page__indicator-light'\n    )\n    $indicators.forEach(($indicator, index) => {\n      $indicator.classList.toggle(\n        'govuk-exit-this-page__indicator-light--on',\n        index < this.keypressCounter\n      )\n    })\n  }\n\n  /**\n   * Initiates the redirection away from the current page.\n   * Includes the loading overlay functionality, which covers the current page with a\n   * white overlay so that the contents are not visible during the loading\n   * process. This is particularly important on slow network connections.\n   *\n   * @private\n   */\n  exitPage() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    this.$updateSpan.textContent = ''\n\n    // Blank the page\n    // As well as creating an overlay with text, we also set the body to hidden\n    // to prevent screen reader and sequential navigation users potentially\n    // navigating through the page behind the overlay during loading\n    document.body.classList.add('govuk-exit-this-page-hide-content')\n    this.$overlay = document.createElement('div')\n    this.$overlay.className = 'govuk-exit-this-page-overlay'\n    this.$overlay.setAttribute('role', 'alert')\n\n    // we do these this way round, thus incurring a second paint, because changing\n    // the element text after adding it means that screen readers pick up the\n    // announcement more reliably.\n    document.body.appendChild(this.$overlay)\n    this.$overlay.textContent = this.i18n.t('activated')\n\n    window.location.href = this.$button.href\n  }\n\n  /**\n   * Pre-activation logic for when the button is clicked/activated via mouse or\n   * pointer.\n   *\n   * We do this to differentiate it from the keyboard activation event because we\n   * need to run `e.preventDefault` as the button or skiplink are both links and we\n   * want to apply some additional logic in `exitPage` before navigating.\n   *\n   * @private\n   * @param {MouseEvent} event - mouse click event\n   */\n  handleClick(event) {\n    event.preventDefault()\n    this.exitPage()\n  }\n\n  /**\n   * Logic for the 'quick escape' keyboard sequence functionality (pressing the\n   * Shift key three times without interruption, within a time limit).\n   *\n   * @private\n   * @param {KeyboardEvent} event - keyup event\n   */\n  handleKeypress(event) {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    // Detect if the 'Shift' key has been pressed. We want to only do things if it\n    // was pressed by itself and not in a combination with another keyâ€”so we keep\n    // track of whether the preceding keyup had shiftKey: true on it, and if it\n    // did, we ignore the next Shift keyup event.\n    //\n    // This works because using Shift as a modifier key (e.g. pressing Shift + A)\n    // will fire TWO keyup events, one for A (with e.shiftKey: true) and the other\n    // for Shift (with e.shiftKey: false).\n    if (event.key === 'Shift' && !this.lastKeyWasModified) {\n      this.keypressCounter += 1\n\n      // Update the indicator before the below if statement can reset it back to 0\n      this.updateIndicator()\n\n      // Clear the timeout for the keypress timeout message clearing itself\n      if (this.timeoutMessageId) {\n        window.clearTimeout(this.timeoutMessageId)\n        this.timeoutMessageId = null\n      }\n\n      if (this.keypressCounter >= 3) {\n        this.keypressCounter = 0\n\n        if (this.keypressTimeoutId) {\n          window.clearTimeout(this.keypressTimeoutId)\n          this.keypressTimeoutId = null\n        }\n\n        this.exitPage()\n      } else {\n        if (this.keypressCounter === 1) {\n          this.$updateSpan.textContent = this.i18n.t('pressTwoMoreTimes')\n        } else {\n          this.$updateSpan.textContent = this.i18n.t('pressOneMoreTime')\n        }\n      }\n\n      this.setKeypressTimer()\n    } else if (this.keypressTimeoutId) {\n      // If the user pressed any key other than 'Shift', after having pressed\n      // 'Shift' and activating the timer, stop and reset the timer.\n      this.resetKeypressTimer()\n    }\n\n    // Keep track of whether the Shift modifier key was held during this keypress\n    this.lastKeyWasModified = event.shiftKey\n  }\n\n  /**\n   * Starts the 'quick escape' keyboard sequence timer.\n   *\n   * This can be invoked several times. We want this to be possible so that the\n   * timer is restarted each time the shortcut key is pressed (e.g. the user has\n   * up to n seconds between each keypress, rather than n seconds to invoke the\n   * entire sequence.)\n   *\n   * @private\n   */\n  setKeypressTimer() {\n    // Clear any existing timeout. This is so only one timer is running even if\n    // there are multiple keypresses in quick succession.\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    // Set a fresh timeout\n    this.keypressTimeoutId = window.setTimeout(\n      this.resetKeypressTimer.bind(this),\n      this.timeoutTime\n    )\n  }\n\n  /**\n   * Stops and resets the 'quick escape' keyboard sequence timer.\n   *\n   * @private\n   */\n  resetKeypressTimer() {\n    if (!this.$updateSpan) {\n      return\n    }\n\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n      this.keypressTimeoutId = null\n    }\n\n    const $updateSpan = this.$updateSpan\n\n    this.keypressCounter = 0\n    $updateSpan.textContent = this.i18n.t('timedOut')\n\n    this.timeoutMessageId = window.setTimeout(() => {\n      $updateSpan.textContent = ''\n    }, this.timeoutTime)\n\n    this.updateIndicator()\n  }\n\n  /**\n   * Reset the page using the EtP button\n   *\n   * We use this in situations where a user may re-enter a page using the browser\n   * back button. In these cases, the browser can choose to restore the state of\n   * the page as it was previously, including restoring the 'ghost page' overlay,\n   * the announcement span having it's role set to \"alert\" and the keypress\n   * indicator still active, leaving the page in an unusable state.\n   *\n   * By running this check when the page is shown, we can programatically restore\n   * the page and the component to a \"default\" state\n   *\n   * @private\n   */\n  resetPage() {\n    // If an overlay is set, remove it and reset the value\n    document.body.classList.remove('govuk-exit-this-page-hide-content')\n\n    if (this.$overlay) {\n      this.$overlay.remove()\n      this.$overlay = null\n    }\n\n    // Ensure the announcement span's role is status, not alert and clear any text\n    if (this.$updateSpan) {\n      this.$updateSpan.setAttribute('role', 'status')\n      this.$updateSpan.textContent = ''\n    }\n\n    // Sync the keypress indicator lights\n    this.updateIndicator()\n\n    // If the timeouts are active, clear them\n    if (this.keypressTimeoutId) {\n      window.clearTimeout(this.keypressTimeoutId)\n    }\n\n    if (this.timeoutMessageId) {\n      window.clearTimeout(this.timeoutMessageId)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-exit-this-page'\n\n  /**\n   * Exit this page default config\n   *\n   * @see {@link ExitThisPageConfig}\n   * @constant\n   * @type {ExitThisPageConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      activated: 'Loading.',\n      timedOut: 'Exit this page expired.',\n      pressTwoMoreTimes: 'Shift, press 2 more times to exit.',\n      pressOneMoreTime: 'Shift, press 1 more time to exit.'\n    }\n  })\n\n  /**\n   * Exit this page config schema\n   *\n   * @constant\n   * @satisfies {Schema}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Exit this Page config\n *\n * @see {@link ExitThisPage.defaults}\n * @typedef {object} ExitThisPageConfig\n * @property {ExitThisPageTranslations} [i18n=ExitThisPage.defaults.i18n] - Exit this page translations\n */\n\n/**\n * Exit this Page translations\n *\n * @see {@link ExitThisPage.defaults.i18n}\n * @typedef {object} ExitThisPageTranslations\n *\n * Messages used by the component programatically inserted text, including\n * overlay text and screen reader announcements.\n * @property {string} [activated] - Screen reader announcement for when EtP\n *   keypress functionality has been successfully activated.\n * @property {string} [timedOut] - Screen reader announcement for when the EtP\n *   keypress functionality has timed out.\n * @property {string} [pressTwoMoreTimes] - Screen reader announcement informing\n *   the user they must press the activation key two more times.\n * @property {string} [pressOneMoreTime] - Screen reader announcement informing\n *   the user they must press the activation key one more time.\n */\n\n/**\n * @typedef {import('../../common/index.mjs').Schema} Schema\n */\n","import { getBreakpoint } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Header component\n *\n * @preserve\n */\nexport class Header extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $menuButton\n\n  /** @private */\n  $menu\n\n  /**\n   * Save the opened/closed state for the nav in memory so that we can\n   * accurately maintain state when the screen is changed from small to big and\n   * back to small\n   *\n   * @private\n   */\n  menuIsOpen = false\n\n  /**\n   * A global const for storing a matchMedia instance which we'll use to detect\n   * when a screen size change happens. We rely on it being null if the feature\n   * isn't available to initially apply hidden attributes\n   *\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * Apply a matchMedia for desktop which will trigger a state sync if the\n   * browser viewport moves between states.\n   *\n   * @param {Element | null} $module - HTML element to use for header\n   */\n  constructor($module) {\n    super()\n\n    if (!$module) {\n      throw new ElementError({\n        componentName: 'Header',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n    const $menuButton = $module.querySelector('.govuk-js-header-toggle')\n\n    // Headers don't necessarily have a navigation. When they don't, the menu\n    // toggle won't be rendered by our macro (or may be omitted when writing\n    // plain HTML)\n    if (!$menuButton) {\n      return this\n    }\n\n    const menuId = $menuButton.getAttribute('aria-controls')\n    if (!menuId) {\n      throw new ElementError({\n        componentName: 'Header',\n        identifier:\n          'Navigation button (`<button class=\"govuk-js-header-toggle\">`) attribute (`aria-controls`)'\n      })\n    }\n\n    const $menu = document.getElementById(menuId)\n    if (!$menu) {\n      throw new ElementError({\n        componentName: 'Header',\n        element: $menu,\n        identifier: `Navigation (\\`<ul id=\"${menuId}\">\\`)`\n      })\n    }\n\n    this.$menu = $menu\n    this.$menuButton = $menuButton\n\n    this.setupResponsiveChecks()\n\n    this.$menuButton.addEventListener('click', () =>\n      this.handleMenuButtonClick()\n    )\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('desktop')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        componentName: 'Header',\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend desktop breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Sync menu state\n   *\n   * Uses the global variable menuIsOpen to correctly set the accessible and\n   * visual states of the menu and the menu button.\n   * Additionally will force the menu to be visible and the menu button to be\n   * hidden if the matchMedia is triggered to desktop.\n   *\n   * @private\n   */\n  checkMode() {\n    if (!this.mql || !this.$menu || !this.$menuButton) {\n      return\n    }\n\n    if (this.mql.matches) {\n      this.$menu.removeAttribute('hidden')\n      this.$menuButton.setAttribute('hidden', '')\n    } else {\n      this.$menuButton.removeAttribute('hidden')\n      this.$menuButton.setAttribute('aria-expanded', this.menuIsOpen.toString())\n\n      if (this.menuIsOpen) {\n        this.$menu.removeAttribute('hidden')\n      } else {\n        this.$menu.setAttribute('hidden', '')\n      }\n    }\n  }\n\n  /**\n   * Handle menu button click\n   *\n   * When the menu button is clicked, change the visibility of the menu and then\n   * sync the accessibility state and menu button state\n   *\n   * @private\n   */\n  handleMenuButtonClick() {\n    this.menuIsOpen = !this.menuIsOpen\n    this.checkMode()\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-header'\n}\n","import { mergeConfigs, setFocus } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Notification Banner component\n *\n * @preserve\n */\nexport class NotificationBanner extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {NotificationBannerConfig}\n   */\n  config\n\n  /**\n   * @param {Element | null} $module - HTML element to use for notification banner\n   * @param {NotificationBannerConfig} [config] - Notification banner config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Notification banner',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    this.config = mergeConfigs(\n      NotificationBanner.defaults,\n      config,\n      normaliseDataset(NotificationBanner, $module.dataset)\n    )\n\n    /**\n     * Focus the notification banner\n     *\n     * If `role=\"alert\"` is set, focus the element to help some assistive\n     * technologies prioritise announcing it.\n     *\n     * You can turn off the auto-focus functionality by setting\n     * `data-disable-auto-focus=\"true\"` in the component HTML. You might wish to\n     * do this based on user research findings, or to avoid a clash with another\n     * element which should be focused when the page loads.\n     */\n    if (\n      this.$module.getAttribute('role') === 'alert' &&\n      !this.config.disableAutoFocus\n    ) {\n      setFocus(this.$module)\n    }\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-notification-banner'\n\n  /**\n   * Notification banner default config\n   *\n   * @see {@link NotificationBannerConfig}\n   * @constant\n   * @type {NotificationBannerConfig}\n   */\n  static defaults = Object.freeze({\n    disableAutoFocus: false\n  })\n\n  /**\n   * Notification banner config schema\n   *\n   * @constant\n   * @satisfies {Schema}\n   */\n  static schema = Object.freeze({\n    properties: {\n      disableAutoFocus: { type: 'boolean' }\n    }\n  })\n}\n\n/**\n * Notification banner config\n *\n * @typedef {object} NotificationBannerConfig\n * @property {boolean} [disableAutoFocus=false] - If set to `true` the\n *   notification banner will not be focussed when the page loads. This only\n *   applies if the component has a `role` of `alert` â€“ in other cases the\n *   component will not be focused on page load, regardless of this option.\n */\n\n/**\n * @typedef {import('../../common/index.mjs').Schema} Schema\n */\n","import { closestAttributeValue } from '../../common/closest-attribute-value.mjs'\nimport { mergeConfigs } from '../../common/index.mjs'\nimport { normaliseDataset } from '../../common/normalise-dataset.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\nimport { I18n } from '../../i18n.mjs'\n\n/**\n * Password input component\n *\n * @preserve\n */\nexport class PasswordInput extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @private\n   * @type {PasswordInputConfig}\n   */\n  config\n\n  /** @private */\n  i18n\n\n  /**\n   * @private\n   * @type {HTMLInputElement}\n   */\n  $input\n\n  /**\n   * @private\n   * @type {HTMLButtonElement}\n   */\n  $showHideButton\n\n  /** @private */\n  $screenReaderStatusMessage\n\n  /**\n   * @param {Element | null} $module - HTML element to use for password input\n   * @param {PasswordInputConfig} [config] - Password input config\n   */\n  constructor($module, config = {}) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Password input',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $input = $module.querySelector('.govuk-js-password-input-input')\n    if (!($input instanceof HTMLInputElement)) {\n      throw new ElementError({\n        componentName: 'Password input',\n        element: $input,\n        expectedType: 'HTMLInputElement',\n        identifier: 'Form field (`.govuk-js-password-input-input`)'\n      })\n    }\n\n    if ($input.type !== 'password') {\n      throw new ElementError(\n        'Password input: Form field (`.govuk-js-password-input-input`) must be of type `password`.'\n      )\n    }\n\n    const $showHideButton = $module.querySelector(\n      '.govuk-js-password-input-toggle'\n    )\n    if (!($showHideButton instanceof HTMLButtonElement)) {\n      throw new ElementError({\n        componentName: 'Password input',\n        element: $showHideButton,\n        expectedType: 'HTMLButtonElement',\n        identifier: 'Button (`.govuk-js-password-input-toggle`)'\n      })\n    }\n\n    if ($showHideButton.type !== 'button') {\n      throw new ElementError(\n        'Password input: Button (`.govuk-js-password-input-toggle`) must be of type `button`.'\n      )\n    }\n\n    this.$module = $module\n    this.$input = $input\n    this.$showHideButton = $showHideButton\n\n    this.config = mergeConfigs(\n      PasswordInput.defaults,\n      config,\n      normaliseDataset(PasswordInput, $module.dataset)\n    )\n\n    this.i18n = new I18n(this.config.i18n, {\n      // Read the fallback if necessary rather than have it set in the defaults\n      locale: closestAttributeValue($module, 'lang')\n    })\n\n    // Show the toggle button element\n    this.$showHideButton.removeAttribute('hidden')\n\n    // Create and append the status text for screen readers.\n    // This is injected between the input and button so that users get a sensible reading order if\n    // moving through the page content linearly:\n    // [password input] -> [your password is visible/hidden] -> [show/hide password]\n    const $screenReaderStatusMessage = document.createElement('div')\n    $screenReaderStatusMessage.className =\n      'govuk-password-input__sr-status govuk-visually-hidden'\n    $screenReaderStatusMessage.setAttribute('aria-live', 'polite')\n    this.$screenReaderStatusMessage = $screenReaderStatusMessage\n    this.$input.insertAdjacentElement('afterend', $screenReaderStatusMessage)\n\n    // Bind toggle button\n    this.$showHideButton.addEventListener('click', this.toggle.bind(this))\n\n    // Bind event to revert the password visibility to hidden\n    if (this.$input.form) {\n      this.$input.form.addEventListener('submit', () => this.hide())\n    }\n\n    // If the page is restored from bfcache and the password is visible, hide it again\n    window.addEventListener('pageshow', (event) => {\n      if (event.persisted && this.$input.type !== 'password') {\n        this.hide()\n      }\n    })\n\n    // Default the component to having the password hidden.\n    this.hide()\n  }\n\n  /**\n   * Toggle the visibility of the password input\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  toggle(event) {\n    event.preventDefault()\n\n    // If on this click, the field is type=\"password\", show the value\n    if (this.$input.type === 'password') {\n      this.show()\n      return\n    }\n\n    // Otherwise, hide it\n    // Being defensive - hiding should always be the default\n    this.hide()\n  }\n\n  /**\n   * Show the password input value in plain text.\n   *\n   * @private\n   */\n  show() {\n    this.setType('text')\n  }\n\n  /**\n   * Hide the password input value.\n   *\n   * @private\n   */\n  hide() {\n    this.setType('password')\n  }\n\n  /**\n   * Set the password input type\n   *\n   * @param {'text' | 'password'} type - Input type\n   * @private\n   */\n  setType(type) {\n    if (type === this.$input.type) {\n      return\n    }\n\n    // Update input type\n    this.$input.setAttribute('type', type)\n\n    const isHidden = type === 'password'\n    const prefixButton = isHidden ? 'show' : 'hide'\n    const prefixStatus = isHidden ? 'passwordHidden' : 'passwordShown'\n\n    // Update button text\n    this.$showHideButton.innerText = this.i18n.t(`${prefixButton}Password`)\n\n    // Update button aria-label\n    this.$showHideButton.setAttribute(\n      'aria-label',\n      this.i18n.t(`${prefixButton}PasswordAriaLabel`)\n    )\n\n    // Update status change text\n    this.$screenReaderStatusMessage.innerText = this.i18n.t(\n      `${prefixStatus}Announcement`\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-password-input'\n\n  /**\n   * Password input default config\n   *\n   * @see {@link PasswordInputConfig}\n   * @constant\n   * @default\n   * @type {PasswordInputConfig}\n   */\n  static defaults = Object.freeze({\n    i18n: {\n      showPassword: 'Show',\n      hidePassword: 'Hide',\n      showPasswordAriaLabel: 'Show password',\n      hidePasswordAriaLabel: 'Hide password',\n      passwordShownAnnouncement: 'Your password is visible',\n      passwordHiddenAnnouncement: 'Your password is hidden'\n    }\n  })\n\n  /**\n   * Password input config schema\n   *\n   * @constant\n   * @satisfies {Schema}\n   */\n  static schema = Object.freeze({\n    properties: {\n      i18n: { type: 'object' }\n    }\n  })\n}\n\n/**\n * Password input config\n *\n * @typedef {object} PasswordInputConfig\n * @property {PasswordInputTranslations} [i18n=PasswordInput.defaults.i18n] - Password input translations\n */\n\n/**\n * Password input translations\n *\n * @see {@link PasswordInput.defaults.i18n}\n * @typedef {object} PasswordInputTranslations\n *\n * Messages displayed to the user indicating the state of the show/hide toggle.\n * @property {string} [showPassword] - Visible text of the button when the\n *   password is currently hidden. Plain text only.\n * @property {string} [hidePassword] - Visible text of the button when the\n *   password is currently visible. Plain text only.\n * @property {string} [showPasswordAriaLabel] - aria-label of the button when\n *   the password is currently hidden. Plain text only.\n * @property {string} [hidePasswordAriaLabel] - aria-label of the button when\n *   the password is currently visible. Plain text only.\n * @property {string} [passwordShownAnnouncement] - Screen reader\n *   announcement to make when the password has just become visible.\n *   Plain text only.\n * @property {string} [passwordHiddenAnnouncement] - Screen reader\n *   announcement to make when the password has just been hidden.\n *   Plain text only.\n */\n\n/**\n * @typedef {import('../../common/index.mjs').Schema} Schema\n * @typedef {import('../../i18n.mjs').TranslationPluralForms} TranslationPluralForms\n */\n","import { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Radios component\n *\n * @preserve\n */\nexport class Radios extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $inputs\n\n  /**\n   * Radios can be associated with a 'conditionally revealed' content block â€“\n   * for example, a radio for 'Phone' could reveal an additional form field for\n   * the user to enter their phone number.\n   *\n   * These associations are made using a `data-aria-controls` attribute, which\n   * is promoted to an aria-controls attribute during initialisation.\n   *\n   * We also need to restore the state of any conditional reveals on the page\n   * (for example if the user has navigated back), and set up event handlers to\n   * keep the reveal in sync with the radio state.\n   *\n   * @param {Element | null} $module - HTML element to use for radios\n   */\n  constructor($module) {\n    super()\n\n    if (!($module instanceof HTMLElement)) {\n      throw new ElementError({\n        componentName: 'Radios',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $inputs = $module.querySelectorAll('input[type=\"radio\"]')\n    if (!$inputs.length) {\n      throw new ElementError({\n        componentName: 'Radios',\n        identifier: 'Form inputs (`<input type=\"radio\">`)'\n      })\n    }\n\n    this.$module = $module\n    this.$inputs = $inputs\n\n    this.$inputs.forEach(($input) => {\n      const targetId = $input.getAttribute('data-aria-controls')\n\n      // Skip radios without data-aria-controls attributes\n      if (!targetId) {\n        return\n      }\n\n      // Throw if target conditional element does not exist.\n      if (!document.getElementById(targetId)) {\n        throw new ElementError({\n          componentName: 'Radios',\n          identifier: `Conditional reveal (\\`id=\"${targetId}\"\\`)`\n        })\n      }\n\n      // Promote the data-aria-controls attribute to a aria-controls attribute\n      // so that the relationship is exposed in the AOM\n      $input.setAttribute('aria-controls', targetId)\n      $input.removeAttribute('data-aria-controls')\n    })\n\n    // When the page is restored after navigating 'back' in some browsers the\n    // state of form controls is not restored until *after* the DOMContentLoaded\n    // event is fired, so we need to sync after the pageshow event.\n    window.addEventListener('pageshow', () => this.syncAllConditionalReveals())\n\n    // Although we've set up handlers to sync state on the pageshow event, init\n    // could be called after those events have fired, for example if they are\n    // added to the page dynamically, so sync now too.\n    this.syncAllConditionalReveals()\n\n    // Handle events\n    this.$module.addEventListener('click', (event) => this.handleClick(event))\n  }\n\n  /**\n   * Sync the conditional reveal states for all radio buttons in this $module.\n   *\n   * @private\n   */\n  syncAllConditionalReveals() {\n    this.$inputs.forEach(($input) =>\n      this.syncConditionalRevealWithInputState($input)\n    )\n  }\n\n  /**\n   * Sync conditional reveal with the input state\n   *\n   * Synchronise the visibility of the conditional reveal, and its accessible\n   * state, with the input's checked state.\n   *\n   * @private\n   * @param {HTMLInputElement} $input - Radio input\n   */\n  syncConditionalRevealWithInputState($input) {\n    const targetId = $input.getAttribute('aria-controls')\n    if (!targetId) {\n      return\n    }\n\n    const $target = document.getElementById(targetId)\n    if ($target?.classList.contains('govuk-radios__conditional')) {\n      const inputIsChecked = $input.checked\n\n      $input.setAttribute('aria-expanded', inputIsChecked.toString())\n      $target.classList.toggle(\n        'govuk-radios__conditional--hidden',\n        !inputIsChecked\n      )\n    }\n  }\n\n  /**\n   * Click event handler\n   *\n   * Handle a click within the $module â€“ if the click occurred on a radio, sync\n   * the state of the conditional reveal for all radio buttons in the same form\n   * with the same name (because checking one radio could have un-checked a\n   * radio in another $module)\n   *\n   * @private\n   * @param {MouseEvent} event - Click event\n   */\n  handleClick(event) {\n    const $clickedInput = event.target\n\n    // Ignore clicks on things that aren't radio buttons\n    if (\n      !($clickedInput instanceof HTMLInputElement) ||\n      $clickedInput.type !== 'radio'\n    ) {\n      return\n    }\n\n    // We only need to consider radios with conditional reveals, which will have\n    // aria-controls attributes.\n    const $allInputs = document.querySelectorAll(\n      'input[type=\"radio\"][aria-controls]'\n    )\n\n    const $clickedInputForm = $clickedInput.form\n    const $clickedInputName = $clickedInput.name\n\n    $allInputs.forEach(($input) => {\n      const hasSameFormOwner = $input.form === $clickedInputForm\n      const hasSameName = $input.name === $clickedInputName\n\n      if (hasSameName && hasSameFormOwner) {\n        this.syncConditionalRevealWithInputState($input)\n      }\n    })\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-radios'\n}\n","import { getFragmentFromUrl, setFocus } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Skip link component\n *\n * @preserve\n */\nexport class SkipLink extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /**\n   * @param {Element | null} $module - HTML element to use for skip link\n   * @throws {ElementError} when $module is not set or the wrong type\n   * @throws {ElementError} when $module.hash does not contain a hash\n   * @throws {ElementError} when the linked element is missing or the wrong type\n   */\n  constructor($module) {\n    super()\n\n    if (!($module instanceof HTMLAnchorElement)) {\n      throw new ElementError({\n        componentName: 'Skip link',\n        element: $module,\n        expectedType: 'HTMLAnchorElement',\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    this.$module = $module\n\n    const hash = this.$module.hash\n    const href = this.$module.getAttribute('href') ?? ''\n\n    /** @type {URL | undefined} */\n    let url\n\n    /**\n     * Check for valid link URL\n     *\n     * {@link https://caniuse.com/url}\n     * {@link https://url.spec.whatwg.org}\n     *\n     */\n    try {\n      url = new window.URL(this.$module.href)\n    } catch (error) {\n      throw new ElementError(\n        `Skip link: Target link (\\`href=\"${href}\"\\`) is invalid`\n      )\n    }\n\n    // Return early for external URLs or links to other pages\n    if (\n      url.origin !== window.location.origin ||\n      url.pathname !== window.location.pathname\n    ) {\n      return\n    }\n\n    const linkedElementId = getFragmentFromUrl(hash)\n\n    // Check link path matching current page\n    if (!linkedElementId) {\n      throw new ElementError(\n        `Skip link: Target link (\\`href=\"${href}\"\\`) has no hash fragment`\n      )\n    }\n\n    const $linkedElement = document.getElementById(linkedElementId)\n\n    // Check for link target element\n    if (!$linkedElement) {\n      throw new ElementError({\n        componentName: 'Skip link',\n        element: $linkedElement,\n        identifier: `Target content (\\`id=\"${linkedElementId}\"\\`)`\n      })\n    }\n\n    /**\n     * Focus the linked element on click\n     *\n     * Adds a helper CSS class to hide native focus styles,\n     * but removes it on blur to restore native focus styles\n     */\n    this.$module.addEventListener('click', () =>\n      setFocus($linkedElement, {\n        onBeforeFocus() {\n          $linkedElement.classList.add('govuk-skip-link-focused-element')\n        },\n        onBlur() {\n          $linkedElement.classList.remove('govuk-skip-link-focused-element')\n        }\n      })\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-skip-link'\n}\n","import { getBreakpoint, getFragmentFromUrl } from '../../common/index.mjs'\nimport { ElementError } from '../../errors/index.mjs'\nimport { GOVUKFrontendComponent } from '../../govuk-frontend-component.mjs'\n\n/**\n * Tabs component\n *\n * @preserve\n */\nexport class Tabs extends GOVUKFrontendComponent {\n  /** @private */\n  $module\n\n  /** @private */\n  $tabs\n\n  /** @private */\n  $tabList\n\n  /** @private */\n  $tabListItems\n\n  /** @private */\n  jsHiddenClass = 'govuk-tabs__panel--hidden'\n\n  /** @private */\n  changingHash = false\n\n  /** @private */\n  boundTabClick\n\n  /** @private */\n  boundTabKeydown\n\n  /** @private */\n  boundOnHashChange\n\n  /**\n   * @private\n   * @type {MediaQueryList | null}\n   */\n  mql = null\n\n  /**\n   * @param {Element | null} $module - HTML element to use for tabs\n   */\n  constructor($module) {\n    super()\n\n    if (!$module) {\n      throw new ElementError({\n        componentName: 'Tabs',\n        element: $module,\n        identifier: 'Root element (`$module`)'\n      })\n    }\n\n    const $tabs = $module.querySelectorAll('a.govuk-tabs__tab')\n    if (!$tabs.length) {\n      throw new ElementError({\n        componentName: 'Tabs',\n        identifier: 'Links (`<a class=\"govuk-tabs__tab\">`)'\n      })\n    }\n\n    this.$module = $module\n    this.$tabs = $tabs\n\n    // Save bound functions so we can remove event listeners during teardown\n    this.boundTabClick = this.onTabClick.bind(this)\n    this.boundTabKeydown = this.onTabKeydown.bind(this)\n    this.boundOnHashChange = this.onHashChange.bind(this)\n\n    const $tabList = this.$module.querySelector('.govuk-tabs__list')\n    const $tabListItems = this.$module.querySelectorAll(\n      'li.govuk-tabs__list-item'\n    )\n\n    if (!$tabList) {\n      throw new ElementError({\n        componentName: 'Tabs',\n        identifier: 'List (`<ul class=\"govuk-tabs__list\">`)'\n      })\n    }\n\n    if (!$tabListItems.length) {\n      throw new ElementError({\n        componentName: 'Tabs',\n        identifier: 'List items (`<li class=\"govuk-tabs__list-item\">`)'\n      })\n    }\n\n    this.$tabList = $tabList\n    this.$tabListItems = $tabListItems\n\n    this.setupResponsiveChecks()\n  }\n\n  /**\n   * Setup viewport resize check\n   *\n   * @private\n   */\n  setupResponsiveChecks() {\n    const breakpoint = getBreakpoint('tablet')\n\n    if (!breakpoint.value) {\n      throw new ElementError({\n        componentName: 'Tabs',\n        identifier: `CSS custom property (\\`${breakpoint.property}\\`) on pseudo-class \\`:root\\``\n      })\n    }\n\n    // Media query list for GOV.UK Frontend tablet breakpoint\n    this.mql = window.matchMedia(`(min-width: ${breakpoint.value})`)\n\n    // MediaQueryList.addEventListener isn't supported by Safari < 14 so we need\n    // to be able to fall back to the deprecated MediaQueryList.addListener\n    if ('addEventListener' in this.mql) {\n      this.mql.addEventListener('change', () => this.checkMode())\n    } else {\n      // @ts-expect-error Property 'addListener' does not exist\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      this.mql.addListener(() => this.checkMode())\n    }\n\n    this.checkMode()\n  }\n\n  /**\n   * Setup or teardown handler for viewport resize check\n   *\n   * @private\n   */\n  checkMode() {\n    if (this.mql?.matches) {\n      this.setup()\n    } else {\n      this.teardown()\n    }\n  }\n\n  /**\n   * Setup tab component\n   *\n   * @private\n   */\n  setup() {\n    this.$tabList.setAttribute('role', 'tablist')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.setAttribute('role', 'presentation')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Set HTML attributes\n      this.setAttributes($tab)\n\n      // Handle events\n      $tab.addEventListener('click', this.boundTabClick, true)\n      $tab.addEventListener('keydown', this.boundTabKeydown, true)\n\n      // Remove old active panels\n      this.hideTab($tab)\n    })\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $activeTab = this.getTab(window.location.hash) ?? this.$tabs[0]\n\n    this.showTab($activeTab)\n\n    // Handle hashchange events\n    window.addEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Teardown tab component\n   *\n   * @private\n   */\n  teardown() {\n    this.$tabList.removeAttribute('role')\n\n    this.$tabListItems.forEach(($item) => {\n      $item.removeAttribute('role')\n    })\n\n    this.$tabs.forEach(($tab) => {\n      // Remove events\n      $tab.removeEventListener('click', this.boundTabClick, true)\n      $tab.removeEventListener('keydown', this.boundTabKeydown, true)\n\n      // Unset HTML attributes\n      this.unsetAttributes($tab)\n    })\n\n    // Remove hashchange event handler\n    window.removeEventListener('hashchange', this.boundOnHashChange, true)\n  }\n\n  /**\n   * Handle hashchange event\n   *\n   * @private\n   * @returns {void | undefined} Returns void, or undefined when prevented\n   */\n  onHashChange() {\n    const hash = window.location.hash\n    const $tabWithHash = this.getTab(hash)\n    if (!$tabWithHash) {\n      return\n    }\n\n    // Prevent changing the hash\n    if (this.changingHash) {\n      this.changingHash = false\n      return\n    }\n\n    // Show either the active tab according to the URL's hash or the first tab\n    const $previousTab = this.getCurrentTab()\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($previousTab)\n    this.showTab($tabWithHash)\n    $tabWithHash.focus()\n  }\n\n  /**\n   * Hide panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hideTab($tab) {\n    this.unhighlightTab($tab)\n    this.hidePanel($tab)\n  }\n\n  /**\n   * Show panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showTab($tab) {\n    this.highlightTab($tab)\n    this.showPanel($tab)\n  }\n\n  /**\n   * Get tab link by hash\n   *\n   * @private\n   * @param {string} hash - Hash fragment including #\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getTab(hash) {\n    return this.$module.querySelector(`a.govuk-tabs__tab[href=\"${hash}\"]`)\n  }\n\n  /**\n   * Set tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  setAttributes($tab) {\n    const panelId = getFragmentFromUrl($tab.href)\n    if (!panelId) {\n      return\n    }\n\n    // Set tab attributes\n    $tab.setAttribute('id', `tab_${panelId}`)\n    $tab.setAttribute('role', 'tab')\n    $tab.setAttribute('aria-controls', panelId)\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.setAttribute('tabindex', '-1')\n\n    // Set panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.setAttribute('role', 'tabpanel')\n    $panel.setAttribute('aria-labelledby', $tab.id)\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset tab link and panel attributes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unsetAttributes($tab) {\n    // unset tab attributes\n    $tab.removeAttribute('id')\n    $tab.removeAttribute('role')\n    $tab.removeAttribute('aria-controls')\n    $tab.removeAttribute('aria-selected')\n    $tab.removeAttribute('tabindex')\n\n    // unset panel attributes\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.removeAttribute('role')\n    $panel.removeAttribute('aria-labelledby')\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Handle tab link clicks\n   *\n   * @private\n   * @param {MouseEvent} event - Mouse click event\n   * @returns {void} Returns void\n   */\n  onTabClick(event) {\n    const $currentTab = this.getCurrentTab()\n    const $nextTab = event.currentTarget\n\n    if (!$currentTab || !($nextTab instanceof HTMLAnchorElement)) {\n      return\n    }\n\n    event.preventDefault()\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Update browser URL hash fragment for tab\n   *\n   * - Allows back/forward to navigate tabs\n   * - Avoids page jump when hash changes\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  createHistoryEntry($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    // Save and restore the id so the page doesn't jump when a user clicks a tab\n    // (which changes the hash)\n    const panelId = $panel.id\n    $panel.id = ''\n    this.changingHash = true\n    window.location.hash = panelId\n    $panel.id = panelId\n  }\n\n  /**\n   * Handle tab keydown event\n   *\n   * - Press right/down arrow for next tab\n   * - Press left/up arrow for previous tab\n   *\n   * @private\n   * @param {KeyboardEvent} event - Keydown event\n   */\n  onTabKeydown(event) {\n    switch (event.key) {\n      // 'Left', 'Right', 'Up' and 'Down' required for Edge 16 support.\n      case 'ArrowLeft':\n      case 'ArrowUp':\n      case 'Left':\n      case 'Up':\n        this.activatePreviousTab()\n        event.preventDefault()\n        break\n      case 'ArrowRight':\n      case 'ArrowDown':\n      case 'Right':\n      case 'Down':\n        this.activateNextTab()\n        event.preventDefault()\n        break\n    }\n  }\n\n  /**\n   * Activate next tab\n   *\n   * @private\n   */\n  activateNextTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $nextTabListItem = $currentTab.parentElement.nextElementSibling\n    if (!$nextTabListItem) {\n      return\n    }\n\n    const $nextTab = $nextTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$nextTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($nextTab)\n    $nextTab.focus()\n    this.createHistoryEntry($nextTab)\n  }\n\n  /**\n   * Activate previous tab\n   *\n   * @private\n   */\n  activatePreviousTab() {\n    const $currentTab = this.getCurrentTab()\n    if (!$currentTab?.parentElement) {\n      return\n    }\n\n    const $previousTabListItem =\n      $currentTab.parentElement.previousElementSibling\n    if (!$previousTabListItem) {\n      return\n    }\n\n    const $previousTab = $previousTabListItem.querySelector('a.govuk-tabs__tab')\n    if (!$previousTab) {\n      return\n    }\n\n    this.hideTab($currentTab)\n    this.showTab($previousTab)\n    $previousTab.focus()\n    this.createHistoryEntry($previousTab)\n  }\n\n  /**\n   * Get tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   * @returns {Element | null} Tab panel\n   */\n  getPanel($tab) {\n    const panelId = getFragmentFromUrl($tab.href)\n    if (!panelId) {\n      return null\n    }\n\n    return this.$module.querySelector(`#${panelId}`)\n  }\n\n  /**\n   * Show tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  showPanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.remove(this.jsHiddenClass)\n  }\n\n  /**\n   * Hide tab panel for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  hidePanel($tab) {\n    const $panel = this.getPanel($tab)\n    if (!$panel) {\n      return\n    }\n\n    $panel.classList.add(this.jsHiddenClass)\n  }\n\n  /**\n   * Unset 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  unhighlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'false')\n    $tab.parentElement.classList.remove('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '-1')\n  }\n\n  /**\n   * Set 'selected' state for tab link\n   *\n   * @private\n   * @param {HTMLAnchorElement} $tab - Tab link\n   */\n  highlightTab($tab) {\n    if (!$tab.parentElement) {\n      return\n    }\n\n    $tab.setAttribute('aria-selected', 'true')\n    $tab.parentElement.classList.add('govuk-tabs__list-item--selected')\n    $tab.setAttribute('tabindex', '0')\n  }\n\n  /**\n   * Get current tab link\n   *\n   * @private\n   * @returns {HTMLAnchorElement | null} Tab link\n   */\n  getCurrentTab() {\n    return this.$module.querySelector(\n      '.govuk-tabs__list-item--selected a.govuk-tabs__tab'\n    )\n  }\n\n  /**\n   * Name for the component used when initialising using data-module attributes.\n   */\n  static moduleName = 'govuk-tabs'\n}\n","/* eslint-disable no-new */\n\nimport { version } from './common/govuk-frontend-version.mjs'\nimport { isSupported } from './common/index.mjs'\nimport { Accordion } from './components/accordion/accordion.mjs'\nimport { Button } from './components/button/button.mjs'\nimport { CharacterCount } from './components/character-count/character-count.mjs'\nimport { Checkboxes } from './components/checkboxes/checkboxes.mjs'\nimport { ErrorSummary } from './components/error-summary/error-summary.mjs'\nimport { ExitThisPage } from './components/exit-this-page/exit-this-page.mjs'\nimport { Header } from './components/header/header.mjs'\nimport { NotificationBanner } from './components/notification-banner/notification-banner.mjs'\nimport { PasswordInput } from './components/password-input/password-input.mjs'\nimport { Radios } from './components/radios/radios.mjs'\nimport { SkipLink } from './components/skip-link/skip-link.mjs'\nimport { Tabs } from './components/tabs/tabs.mjs'\nimport { SupportError } from './errors/index.mjs'\n\n/**\n * Initialise all components\n *\n * Use the `data-module` attributes to find, instantiate and init all of the\n * components provided as part of GOV.UK Frontend.\n *\n * @param {Config & { scope?: Element }} [config] - Config for all components (with optional scope)\n */\nfunction initAll(config) {\n  config = typeof config !== 'undefined' ? config : {}\n\n  // Skip initialisation when GOV.UK Frontend is not supported\n  if (!isSupported()) {\n    console.log(new SupportError())\n    return\n  }\n\n  const components = /** @type {const} */ ([\n    [Accordion, config.accordion],\n    [Button, config.button],\n    [CharacterCount, config.characterCount],\n    [Checkboxes],\n    [ErrorSummary, config.errorSummary],\n    [ExitThisPage, config.exitThisPage],\n    [Header],\n    [NotificationBanner, config.notificationBanner],\n    [PasswordInput, config.passwordInput],\n    [Radios],\n    [SkipLink],\n    [Tabs]\n  ])\n\n  // Allow the user to initialise GOV.UK Frontend in only certain sections of the page\n  // Defaults to the entire document if nothing is set.\n  const $scope = config.scope ?? document\n\n  components.forEach(([Component, config]) => {\n    const $elements = $scope.querySelectorAll(\n      `[data-module=\"${Component.moduleName}\"]`\n    )\n\n    $elements.forEach(($element) => {\n      try {\n        // Only pass config to components that accept it\n        'defaults' in Component\n          ? new Component($element, config)\n          : new Component($element)\n      } catch (error) {\n        console.log(error)\n      }\n    })\n  })\n}\n\nexport {\n  initAll,\n  version,\n\n  // Components\n  Accordion,\n  Button,\n  CharacterCount,\n  Checkboxes,\n  ErrorSummary,\n  ExitThisPage,\n  Header,\n  NotificationBanner,\n  PasswordInput,\n  Radios,\n  SkipLink,\n  Tabs\n}\n\n/**\n * Config for all components via `initAll()`\n *\n * @typedef {object} Config\n * @property {AccordionConfig} [accordion] - Accordion config\n * @property {ButtonConfig} [button] - Button config\n * @property {CharacterCountConfig} [characterCount] - Character Count config\n * @property {ErrorSummaryConfig} [errorSummary] - Error Summary config\n * @property {ExitThisPageConfig} [exitThisPage] - Exit This Page config\n * @property {NotificationBannerConfig} [notificationBanner] - Notification Banner config\n * @property {PasswordInputConfig} [passwordInput] - Password input config\n */\n\n/**\n * Config for individual components\n *\n * @typedef {import('./components/accordion/accordion.mjs').AccordionConfig} AccordionConfig\n * @typedef {import('./components/accordion/accordion.mjs').AccordionTranslations} AccordionTranslations\n * @typedef {import('./components/button/button.mjs').ButtonConfig} ButtonConfig\n * @typedef {import('./components/character-count/character-count.mjs').CharacterCountConfig} CharacterCountConfig\n * @typedef {import('./components/character-count/character-count.mjs').CharacterCountTranslations} CharacterCountTranslations\n * @typedef {import('./components/error-summary/error-summary.mjs').ErrorSummaryConfig} ErrorSummaryConfig\n * @typedef {import('./components/exit-this-page/exit-this-page.mjs').ExitThisPageConfig} ExitThisPageConfig\n * @typedef {import('./components/exit-this-page/exit-this-page.mjs').ExitThisPageTranslations} ExitThisPageTranslations\n * @typedef {import('./components/notification-banner/notification-banner.mjs').NotificationBannerConfig} NotificationBannerConfig\n * @typedef {import('./components/password-input/password-input.mjs').PasswordInputConfig} PasswordInputConfig\n */\n\n/**\n * Component config keys, e.g. `accordion` and `characterCount`\n *\n * @typedef {keyof Config} ConfigKey\n */\n"],"names":["version","normaliseString","value","property","trimmedValue","trim","output","outputType","type","includes","length","isFinite","Number","mergeConfigs","configObjects","formattedConfigObject","configObject","key","Object","keys","option","override","isObject","extractConfigByNamespace","Component","dataset","namespace","schema","properties","newObject","entries","current","keyParts","split","index","name","getFragmentFromUrl","url","pop","getBreakpoint","window","getComputedStyle","document","documentElement","getPropertyValue","undefined","setFocus","$element","options","_options$onBeforeFocu","isFocusable","getAttribute","onBlur","_options$onBlur","call","removeAttribute","setAttribute","addEventListener","once","onBeforeFocus","focus","isSupported","$scope","body","classList","contains","Array","isArray","normaliseDataset","out","field","GOVUKFrontendError","Error","constructor","args","super","this","SupportError","supportMessage","HTMLScriptElement","prototype","ConfigError","ElementError","messageOrOptions","message","componentName","identifier","element","expectedType","GOVUKFrontendComponent","checkSupport","I18n","translations","config","_config$locale","locale","lang","t","lookupKey","translation","count","translationPluralForm","getPluralSuffix","match","replacePlaceholders","translationString","formatter","Intl","NumberFormat","supportedLocalesOf","replace","placeholderWithBraces","placeholderKey","hasOwnProperty","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","PluralRules","preferredForm","select","selectPluralFormUsingFallbackRules","console","warn","Math","abs","floor","ruleset","getPluralRulesForLocale","pluralRules","localeShort","pluralRule","pluralRulesMap","languages","arabic","chinese","french","german","irish","russian","scottish","spanish","welsh","n","lastTwo","last","Accordion","$module","i18n","controlsClass","showAllClass","showAllTextClass","sectionClass","sectionExpandedClass","sectionButtonClass","sectionHeaderClass","sectionHeadingClass","sectionHeadingDividerClass","sectionHeadingTextClass","sectionHeadingTextFocusClass","sectionShowHideToggleClass","sectionShowHideToggleFocusClass","sectionShowHideTextClass","upChevronIconClass","downChevronIconClass","sectionSummaryClass","sectionSummaryFocusClass","sectionContentClass","$sections","browserSupportsSessionStorage","$showAllButton","$showAllIcon","$showAllText","HTMLElement","defaults","querySelectorAll","helper","checkForSessionStorage","initControls","initSectionHeaders","areAllSectionsOpen","checkIfAllSectionsOpen","updateShowAllButton","createElement","add","appendChild","$accordionControls","insertBefore","firstChild","onShowOrHideAllToggle","event","onBeforeMatch","forEach","$section","i","$header","querySelector","constructHeaderMarkup","setExpanded","isExpanded","onSectionToggle","setInitialState","$span","$heading","$summary","$button","id","attr","from","attributes","nodeName","nodeValue","$headingText","$headingTextFocus","innerHTML","$showHideToggle","$showHideToggleFocus","$showHideText","$showHideIcon","getButtonPunctuationEl","parentNode","$summarySpan","$summarySpanFocus","replaceChild","removeChild","$fragment","target","Element","closest","expanded","storeState","nowExpanded","$content","newButtonText","textContent","ariaLabelParts","push","ariaLabelMessage","join","remove","toString","toggle","rememberExpanded","contentId","contentState","sessionStorage","setItem","getItem","$punctuationEl","moduleName","freeze","hideAllSections","hideSection","hideSectionAriaLabel","showAllSections","showSection","showSectionAriaLabel","testString","result","removeItem","exception","Button","debounceFormSubmitTimer","handleKeyDown","debounce","$target","preventDefault","click","preventDoubleClick","setTimeout","DEBOUNCE_TIMEOUT_IN_SECONDS","closestAttributeValue","attributeName","$closestElementWithAttribute","CharacterCount","_ref","_this$config$maxwords","$textarea","$visibleCountMessage","$screenReaderCountMessage","lastInputTimestamp","lastInputValue","valueChecker","maxLength","HTMLTextAreaElement","HTMLInputElement","datasetConfig","configOverrides","maxlength","maxwords","errors","validationErrors","conditions","required","errorMessage","every","validateConfig","Infinity","textareaDescriptionId","$textareaDescription","getElementById","insertAdjacentElement","className","bindChangeEvents","updateCountMessage","handleKeyUp","handleFocus","handleBlur","updateVisibleCountMessage","Date","now","setInterval","updateIfValueChanged","clearInterval","updateScreenReaderCountMessage","isError","isOverThreshold","getCountMessage","text","_text$match","remainingNumber","countType","formatCountMessage","translationKeySuffix","threshold","currentLength","charactersUnderLimit","one","other","charactersAtLimit","charactersOverLimit","wordsUnderLimit","wordsAtLimit","wordsOverLimit","textareaDescription","anyOf","Checkboxes","$inputs","$input","targetId","syncAllConditionalReveals","handleClick","syncConditionalRevealWithInputState","inputIsChecked","checked","unCheckAllInputsExcept","$inputWithSameName","form","unCheckExclusiveInputs","$exclusiveInput","$clickedInput","ErrorSummary","disableAutoFocus","focusTarget","HTMLAnchorElement","inputId","href","$legendOrLabel","getAssociatedLegendOrLabel","scrollIntoView","preventScroll","_document$querySelect","$fieldset","$legends","getElementsByTagName","$candidateLegend","legendTop","getBoundingClientRect","top","inputRect","height","innerHeight","ExitThisPage","$skiplinkButton","$updateSpan","$indicatorContainer","$overlay","keypressCounter","lastKeyWasModified","timeoutTime","keypressTimeoutId","timeoutMessageId","buildIndicator","initUpdateSpan","initButtonClickHandler","handleKeypress","bind","govukFrontendExitThisPageKeypress","resetPage","$indicator","updateIndicator","exitPage","location","resetKeypressTimer","clearTimeout","setKeypressTimer","shiftKey","activated","timedOut","pressTwoMoreTimes","pressOneMoreTime","Header","$menuButton","$menu","menuIsOpen","mql","menuId","setupResponsiveChecks","handleMenuButtonClick","breakpoint","matchMedia","checkMode","addListener","matches","NotificationBanner","PasswordInput","$showHideButton","$screenReaderStatusMessage","HTMLButtonElement","hide","persisted","show","setType","isHidden","prefixButton","prefixStatus","innerText","showPassword","hidePassword","showPasswordAriaLabel","hidePasswordAriaLabel","passwordShownAnnouncement","passwordHiddenAnnouncement","Radios","$allInputs","$clickedInputForm","$clickedInputName","hasSameFormOwner","SkipLink","_this$$module$getAttr","hash","URL","error","origin","pathname","linkedElementId","$linkedElement","Tabs","$tabs","$tabList","$tabListItems","jsHiddenClass","changingHash","boundTabClick","boundTabKeydown","boundOnHashChange","onTabClick","onTabKeydown","onHashChange","_this$mql","setup","teardown","_this$getTab","$item","$tab","setAttributes","hideTab","$activeTab","getTab","showTab","removeEventListener","unsetAttributes","$tabWithHash","$previousTab","getCurrentTab","unhighlightTab","hidePanel","highlightTab","showPanel","panelId","$panel","getPanel","$currentTab","$nextTab","currentTarget","createHistoryEntry","activatePreviousTab","activateNextTab","parentElement","$nextTabListItem","nextElementSibling","$previousTabListItem","previousElementSibling","initAll","_config$scope","log","components","accordion","button","characterCount","errorSummary","exitThisPage","notificationBanner","passwordInput","scope"],"mappings":"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"}